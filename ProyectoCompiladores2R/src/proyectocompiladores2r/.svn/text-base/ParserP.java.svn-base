
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Mon Nov 21 08:05:31 CST 2011
//----------------------------------------------------

package proyectocompiladores2r;

import java_cup.runtime.Symbol;
import java.util.*;
import java.io.FileReader;
import java.io.File;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.IOException;
import java.util.Vector;
import java.util.LinkedList;
import AST.*;
import java.io.FileNotFoundException;

/** CUP v0.10k generated parser.
  * @version Mon Nov 21 08:05:31 CST 2011
  */
public class ParserP extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserP() {super();}

  /** Constructor which sets the default scanner. */
  public ParserP(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\230\000\002\002\004\000\002\003\004\000\002\003" +
    "\003\000\002\057\004\000\002\057\003\000\002\056\004" +
    "\000\002\056\003\000\002\055\007\000\002\004\007\000" +
    "\002\004\011\000\002\005\004\000\002\005\004\000\002" +
    "\005\003\000\002\005\003\000\002\006\003\000\002\006" +
    "\003\000\002\011\006\000\002\011\007\000\002\011\006" +
    "\000\002\011\005\000\002\007\012\000\002\007\012\000" +
    "\002\007\011\000\002\007\011\000\002\007\013\000\002" +
    "\007\012\000\002\007\013\000\002\007\012\000\002\010" +
    "\006\000\002\010\007\000\002\010\004\000\002\010\005" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\013\003\000\002\014\004\000\002\014\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\004\000\002\015\004" +
    "\000\002\015\004\000\002\015\005\000\002\015\004\000" +
    "\002\015\004\000\002\020\011\000\002\020\007\000\002" +
    "\020\015\000\002\020\012\000\002\020\016\000\002\022" +
    "\013\000\002\022\012\000\002\023\015\000\002\023\013" +
    "\000\002\023\014\000\002\023\012\000\002\024\011\000" +
    "\002\024\007\000\002\025\012\000\002\060\002\000\002" +
    "\026\012\000\002\031\003\000\002\030\004\000\002\030" +
    "\003\000\002\030\003\000\002\027\006\000\002\032\005" +
    "\000\002\033\005\000\002\033\005\000\002\033\005\000" +
    "\002\033\006\000\002\033\006\000\002\033\006\000\002" +
    "\033\006\000\002\033\006\000\002\037\003\000\002\040" +
    "\005\000\002\040\003\000\002\041\005\000\002\041\003" +
    "\000\002\042\005\000\002\042\003\000\002\043\005\000" +
    "\002\043\005\000\002\043\003\000\002\044\005\000\002" +
    "\044\005\000\002\044\005\000\002\044\005\000\002\044" +
    "\003\000\002\045\005\000\002\045\005\000\002\045\003" +
    "\000\002\046\005\000\002\046\005\000\002\046\005\000" +
    "\002\046\003\000\002\047\006\000\002\047\005\000\002" +
    "\047\003\000\002\047\003\000\002\050\005\000\002\050" +
    "\006\000\002\050\007\000\002\050\010\000\002\050\004" +
    "\000\002\050\005\000\002\050\006\000\002\050\006\000" +
    "\002\050\007\000\002\050\003\000\002\052\006\000\002" +
    "\052\005\000\002\051\003\000\002\051\003\000\002\051" +
    "\005\000\002\051\003\000\002\051\003\000\002\051\003" +
    "\000\002\034\003\000\002\035\007\000\002\035\005\000" +
    "\002\035\006\000\002\035\005\000\002\035\004\000\002" +
    "\035\006\000\002\054\003\000\002\054\003\000\002\054" +
    "\003\000\002\054\003\000\002\054\003\000\002\054\003" +
    "\000\002\036\006\000\002\036\005\000\002\016\004\000" +
    "\002\016\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\004\000\002\017\004\000\002\017\004\000\002\017\004" +
    "\000\002\017\005\000\002\017\004\000\002\017\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0154\000\006\004\005\005\010\001\002\000\006\004" +
    "\ufffb\005\ufffb\001\002\000\004\062\u0153\001\002\000\006" +
    "\002\uffff\005\010\001\002\000\004\002\u0152\001\002\000" +
    "\004\062\016\001\002\000\006\004\005\005\010\001\002" +
    "\000\006\002\ufffd\005\ufffd\001\002\000\006\004\ufffc\005" +
    "\ufffc\001\002\000\006\002\000\005\010\001\002\000\006" +
    "\002\ufffe\005\ufffe\001\002\000\006\006\020\024\017\001" +
    "\002\000\026\007\024\010\036\011\035\062\033\066\025" +
    "\067\040\070\026\072\032\073\041\074\031\001\002\000" +
    "\004\062\021\001\002\000\004\024\022\001\002\000\026" +
    "\007\024\010\036\011\035\062\033\066\025\067\040\070" +
    "\026\072\032\073\041\074\031\001\002\000\030\007\ufff5" +
    "\010\ufff5\011\ufff5\025\ufff5\062\ufff5\066\ufff5\067\ufff5\070" +
    "\ufff5\072\ufff5\073\ufff5\074\ufff5\001\002\000\020\062\uffe1" +
    "\066\uffe1\067\uffe1\070\uffe1\072\uffe1\073\uffe1\074\uffe1\001" +
    "\002\000\006\037\uff7f\062\uff7f\001\002\000\006\037\uff7a" +
    "\062\uff7a\001\002\000\030\007\ufff4\010\ufff4\011\ufff4\025" +
    "\ufff4\062\ufff4\066\ufff4\067\ufff4\070\ufff4\072\ufff4\073\ufff4" +
    "\074\ufff4\001\002\000\030\007\024\010\036\011\035\025" +
    "\u014e\062\033\066\025\067\040\070\026\072\032\073\041" +
    "\074\031\001\002\000\004\062\u0142\001\002\000\006\037" +
    "\uff7c\062\uff7c\001\002\000\006\037\uff7d\062\uff7d\001\002" +
    "\000\020\062\033\066\025\067\040\070\026\072\032\073" +
    "\041\074\u0128\001\002\000\020\062\uffdf\066\uffdf\067\uffdf" +
    "\070\uffdf\072\uffdf\073\uffdf\074\uffdf\001\002\000\020\062" +
    "\uffe0\066\uffe0\067\uffe0\070\uffe0\072\uffe0\073\uffe0\074\uffe0" +
    "\001\002\000\004\062\042\001\002\000\006\037\uff7e\062" +
    "\uff7e\001\002\000\006\037\uff7b\062\uff7b\001\002\000\010" +
    "\026\045\030\043\033\046\001\002\000\004\063\u0125\001" +
    "\002\000\006\030\312\033\u0124\001\002\000\020\027\047" +
    "\062\033\066\025\067\040\070\026\072\032\073\041\001" +
    "\002\000\030\007\uffee\010\uffee\011\uffee\025\uffee\062\uffee" +
    "\066\uffee\067\uffee\070\uffee\072\uffee\073\uffee\074\uffee\001" +
    "\002\000\004\024\u0121\001\002\000\006\027\056\035\055" +
    "\001\002\000\006\037\053\062\052\001\002\000\006\027" +
    "\uffe3\035\uffe3\001\002\000\004\062\054\001\002\000\006" +
    "\027\uffe2\035\uffe2\001\002\000\016\062\033\066\025\067" +
    "\040\070\026\072\032\073\041\001\002\000\004\024\057" +
    "\001\002\000\036\003\100\013\067\015\105\016\061\017" +
    "\064\023\072\032\103\057\063\062\071\066\025\067\040" +
    "\070\026\072\032\073\041\001\002\000\004\062\u0119\001" +
    "\002\000\004\026\u0112\001\002\000\004\033\u0111\001\002" +
    "\000\024\026\140\032\103\055\123\060\126\061\135\062" +
    "\107\063\137\064\122\065\133\001\002\000\004\026\375" +
    "\001\002\000\022\033\uffb2\036\113\040\114\041\115\042" +
    "\117\043\116\044\112\056\120\001\002\000\046\003\uffda" +
    "\013\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022" +
    "\uffda\023\uffda\025\uffda\032\uffda\057\uffda\062\uffda\066\uffda" +
    "\067\uffda\070\uffda\072\uffda\073\uffda\001\002\000\004\026" +
    "\337\001\002\000\046\003\uffd7\013\uffd7\015\uffd7\016\uffd7" +
    "\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\025\uffd7\032" +
    "\uffd7\057\uffd7\062\uffd7\066\uffd7\067\uffd7\070\uffd7\072\uffd7" +
    "\073\uffd7\001\002\000\030\026\300\030\215\033\uff8f\036" +
    "\uff8f\040\uff8f\041\uff8f\042\uff8f\043\uff8f\044\uff8f\056\uff8f" +
    "\062\uff7d\001\002\000\004\024\330\001\002\000\004\033" +
    "\327\001\002\000\046\003\uffd9\013\uffd9\015\uffd9\016\uffd9" +
    "\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\025\uffd9\032" +
    "\uffd9\057\uffd9\062\uffd9\066\uffd9\067\uffd9\070\uffd9\072\uffd9" +
    "\073\uffd9\001\002\000\046\003\uffd8\013\uffd8\015\uffd8\016" +
    "\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\025\uffd8" +
    "\032\uffd8\057\uffd8\062\uffd8\066\uffd8\067\uffd8\070\uffd8\072" +
    "\uffd8\073\uffd8\001\002\000\004\033\326\001\002\000\040" +
    "\003\uffdc\013\uffdc\015\uffdc\016\uffdc\017\uffdc\023\uffdc\025" +
    "\uffdc\032\uffdc\057\uffdc\062\uffdc\066\uffdc\067\uffdc\070\uffdc" +
    "\072\uffdc\073\uffdc\001\002\000\006\025\324\033\325\001" +
    "\002\000\040\003\100\013\067\015\105\016\061\017\064" +
    "\023\072\025\322\032\103\057\063\062\071\066\025\067" +
    "\040\070\026\072\032\073\041\001\002\000\046\003\uffdb" +
    "\013\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022" +
    "\uffdb\023\uffdb\025\uffdb\032\uffdb\057\uffdb\062\uffdb\066\uffdb" +
    "\067\uffdb\070\uffdb\072\uffdb\073\uffdb\001\002\000\004\062" +
    "\315\001\002\000\006\033\uff86\035\305\001\002\000\004" +
    "\026\106\001\002\000\006\032\103\062\107\001\002\000" +
    "\056\026\300\027\uff8f\030\215\031\uff8f\033\uff8f\034\uff8f" +
    "\035\uff8f\036\uff8f\040\uff8f\041\uff8f\042\uff8f\043\uff8f\044" +
    "\uff8f\045\uff8f\046\uff8f\047\uff8f\050\uff8f\051\uff8f\052\uff8f" +
    "\053\uff8f\054\uff8f\056\uff8f\001\002\000\004\033\235\001" +
    "\002\000\020\036\113\040\114\041\115\042\117\043\116" +
    "\044\112\056\120\001\002\000\004\056\233\001\002\000" +
    "\004\062\214\001\002\000\006\040\211\056\212\001\002" +
    "\000\006\041\206\056\207\001\002\000\004\056\204\001" +
    "\002\000\004\056\202\001\002\000\024\026\140\032\103" +
    "\055\123\060\126\061\135\062\107\063\137\064\122\065" +
    "\133\001\002\000\020\027\uffae\031\uffae\033\uffae\034\uffae" +
    "\035\uffae\053\145\054\uffae\001\002\000\046\027\uff8c\031" +
    "\uff8c\033\uff8c\034\uff8c\035\uff8c\040\uff8c\041\uff8c\042\uff8c" +
    "\043\uff8c\044\uff8c\045\uff8c\046\uff8c\047\uff8c\050\uff8c\051" +
    "\uff8c\052\uff8c\053\uff8c\054\uff8c\001\002\000\004\026\177" +
    "\001\002\000\024\027\uffac\031\uffac\033\uffac\034\uffac\035" +
    "\uffac\051\147\052\150\053\uffac\054\uffac\001\002\000\046" +
    "\027\uff99\031\uff99\033\uff99\034\uff99\035\uff99\040\uff99\041" +
    "\uff99\042\uff99\043\uff99\044\uff99\045\uff99\046\uff99\047\uff99" +
    "\050\uff99\051\uff99\052\uff99\053\uff99\054\uff99\001\002\000" +
    "\046\027\uff89\031\uff89\033\uff89\034\uff89\035\uff89\040\uff89" +
    "\041\uff89\042\uff89\043\uff89\044\uff89\045\uff89\046\uff89\047" +
    "\uff89\050\uff89\051\uff89\052\uff89\053\uff89\054\uff89\001\002" +
    "\000\050\027\uff9a\031\uff9a\033\uff9a\034\uff9a\035\uff9a\036" +
    "\113\040\uff9a\041\uff9a\042\uff9a\043\uff9a\044\uff9a\045\uff9a" +
    "\046\uff9a\047\uff9a\050\uff9a\051\uff9a\052\uff9a\053\uff9a\054" +
    "\uff9a\001\002\000\034\027\uffa9\031\uffa9\033\uffa9\034\uffa9" +
    "\035\uffa9\045\154\046\155\047\153\050\152\051\uffa9\052" +
    "\uffa9\053\uffa9\054\uffa9\001\002\000\046\027\uff9d\031\uff9d" +
    "\033\uff9d\034\uff9d\035\uff9d\040\uff9d\041\uff9d\042\uff9d\043" +
    "\uff9d\044\uff9d\045\uff9d\046\uff9d\047\uff9d\050\uff9d\051\uff9d" +
    "\052\uff9d\053\uff9d\054\uff9d\001\002\000\010\027\uffba\033" +
    "\uffba\054\143\001\002\000\046\027\uff87\031\uff87\033\uff87" +
    "\034\uff87\035\uff87\040\uff87\041\uff87\042\uff87\043\uff87\044" +
    "\uff87\045\uff87\046\uff87\047\uff87\050\uff87\051\uff87\052\uff87" +
    "\053\uff87\054\uff87\001\002\000\046\027\uffa1\031\uffa1\033" +
    "\uffa1\034\uffa1\035\uffa1\040\uffa1\041\uffa1\042\164\043\163" +
    "\044\162\045\uffa1\046\uffa1\047\uffa1\050\uffa1\051\uffa1\052" +
    "\uffa1\053\uffa1\054\uffa1\001\002\000\046\027\uff88\031\uff88" +
    "\033\uff88\034\uff88\035\uff88\040\uff88\041\uff88\042\uff88\043" +
    "\uff88\044\uff88\045\uff88\046\uff88\047\uff88\050\uff88\051\uff88" +
    "\052\uff88\053\uff88\054\uff88\001\002\000\040\027\uffa4\031" +
    "\uffa4\033\uffa4\034\uffa4\035\uffa4\040\157\041\160\045\uffa4" +
    "\046\uffa4\047\uffa4\050\uffa4\051\uffa4\052\uffa4\053\uffa4\054" +
    "\uffa4\001\002\000\050\027\uff8b\031\uff8b\033\uff8b\034\uff8b" +
    "\035\uff8b\036\175\040\uff8b\041\uff8b\042\uff8b\043\uff8b\044" +
    "\uff8b\045\uff8b\046\uff8b\047\uff8b\050\uff8b\051\uff8b\052\uff8b" +
    "\053\uff8b\054\uff8b\001\002\000\024\026\140\032\103\055" +
    "\123\060\126\061\135\062\107\063\137\064\122\065\133" +
    "\001\002\000\006\027\142\054\143\001\002\000\046\027" +
    "\uff9b\031\uff9b\033\uff9b\034\uff9b\035\uff9b\040\uff9b\041\uff9b" +
    "\042\uff9b\043\uff9b\044\uff9b\045\uff9b\046\uff9b\047\uff9b\050" +
    "\uff9b\051\uff9b\052\uff9b\053\uff9b\054\uff9b\001\002\000\024" +
    "\026\140\032\103\055\123\060\126\061\135\062\107\063" +
    "\137\064\122\065\133\001\002\000\020\027\uffaf\031\uffaf" +
    "\033\uffaf\034\uffaf\035\uffaf\053\145\054\uffaf\001\002\000" +
    "\024\026\140\032\103\055\123\060\126\061\135\062\107" +
    "\063\137\064\122\065\133\001\002\000\024\027\uffad\031" +
    "\uffad\033\uffad\034\uffad\035\uffad\051\147\052\150\053\uffad" +
    "\054\uffad\001\002\000\024\026\140\032\103\055\123\060" +
    "\126\061\135\062\107\063\137\064\122\065\133\001\002" +
    "\000\024\026\140\032\103\055\123\060\126\061\135\062" +
    "\107\063\137\064\122\065\133\001\002\000\034\027\uffaa" +
    "\031\uffaa\033\uffaa\034\uffaa\035\uffaa\045\154\046\155\047" +
    "\153\050\152\051\uffaa\052\uffaa\053\uffaa\054\uffaa\001\002" +
    "\000\024\026\140\032\103\055\123\060\126\061\135\062" +
    "\107\063\137\064\122\065\133\001\002\000\024\026\140" +
    "\032\103\055\123\060\126\061\135\062\107\063\137\064" +
    "\122\065\133\001\002\000\024\026\140\032\103\055\123" +
    "\060\126\061\135\062\107\063\137\064\122\065\133\001" +
    "\002\000\024\026\140\032\103\055\123\060\126\061\135" +
    "\062\107\063\137\064\122\065\133\001\002\000\040\027" +
    "\uffa8\031\uffa8\033\uffa8\034\uffa8\035\uffa8\040\157\041\160" +
    "\045\uffa8\046\uffa8\047\uffa8\050\uffa8\051\uffa8\052\uffa8\053" +
    "\uffa8\054\uffa8\001\002\000\024\026\140\032\103\055\123" +
    "\060\126\061\135\062\107\063\137\064\122\065\133\001" +
    "\002\000\024\026\140\032\103\055\123\060\126\061\135" +
    "\062\107\063\137\064\122\065\133\001\002\000\046\027" +
    "\uffa2\031\uffa2\033\uffa2\034\uffa2\035\uffa2\040\uffa2\041\uffa2" +
    "\042\164\043\163\044\162\045\uffa2\046\uffa2\047\uffa2\050" +
    "\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2\001\002\000\024" +
    "\026\140\032\103\055\123\060\126\061\135\062\107\063" +
    "\137\064\122\065\133\001\002\000\024\026\140\032\103" +
    "\055\123\060\126\061\135\062\107\063\137\064\122\065" +
    "\133\001\002\000\024\026\140\032\103\055\123\060\126" +
    "\061\135\062\107\063\137\064\122\065\133\001\002\000" +
    "\046\027\uffa0\031\uffa0\033\uffa0\034\uffa0\035\uffa0\040\uffa0" +
    "\041\uffa0\042\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0\047" +
    "\uffa0\050\uffa0\051\uffa0\052\uffa0\053\uffa0\054\uffa0\001\002" +
    "\000\046\027\uff9e\031\uff9e\033\uff9e\034\uff9e\035\uff9e\040" +
    "\uff9e\041\uff9e\042\uff9e\043\uff9e\044\uff9e\045\uff9e\046\uff9e" +
    "\047\uff9e\050\uff9e\051\uff9e\052\uff9e\053\uff9e\054\uff9e\001" +
    "\002\000\046\027\uff9f\031\uff9f\033\uff9f\034\uff9f\035\uff9f" +
    "\040\uff9f\041\uff9f\042\uff9f\043\uff9f\044\uff9f\045\uff9f\046" +
    "\uff9f\047\uff9f\050\uff9f\051\uff9f\052\uff9f\053\uff9f\054\uff9f" +
    "\001\002\000\046\027\uffa3\031\uffa3\033\uffa3\034\uffa3\035" +
    "\uffa3\040\uffa3\041\uffa3\042\164\043\163\044\162\045\uffa3" +
    "\046\uffa3\047\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3\054" +
    "\uffa3\001\002\000\040\027\uffa7\031\uffa7\033\uffa7\034\uffa7" +
    "\035\uffa7\040\157\041\160\045\uffa7\046\uffa7\047\uffa7\050" +
    "\uffa7\051\uffa7\052\uffa7\053\uffa7\054\uffa7\001\002\000\040" +
    "\027\uffa5\031\uffa5\033\uffa5\034\uffa5\035\uffa5\040\157\041" +
    "\160\045\uffa5\046\uffa5\047\uffa5\050\uffa5\051\uffa5\052\uffa5" +
    "\053\uffa5\054\uffa5\001\002\000\040\027\uffa6\031\uffa6\033" +
    "\uffa6\034\uffa6\035\uffa6\040\157\041\160\045\uffa6\046\uffa6" +
    "\047\uffa6\050\uffa6\051\uffa6\052\uffa6\053\uffa6\054\uffa6\001" +
    "\002\000\034\027\uffab\031\uffab\033\uffab\034\uffab\035\uffab" +
    "\045\154\046\155\047\153\050\152\051\uffab\052\uffab\053" +
    "\uffab\054\uffab\001\002\000\004\063\176\001\002\000\046" +
    "\027\uff8a\031\uff8a\033\uff8a\034\uff8a\035\uff8a\040\uff8a\041" +
    "\uff8a\042\uff8a\043\uff8a\044\uff8a\045\uff8a\046\uff8a\047\uff8a" +
    "\050\uff8a\051\uff8a\052\uff8a\053\uff8a\054\uff8a\001\002\000" +
    "\024\026\140\032\103\055\123\060\126\061\135\062\107" +
    "\063\137\064\122\065\133\001\002\000\006\027\201\054" +
    "\143\001\002\000\046\027\uff9c\031\uff9c\033\uff9c\034\uff9c" +
    "\035\uff9c\040\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c\045" +
    "\uff9c\046\uff9c\047\uff9c\050\uff9c\051\uff9c\052\uff9c\053\uff9c" +
    "\054\uff9c\001\002\000\024\026\140\032\103\055\123\060" +
    "\126\061\135\062\107\063\137\064\122\065\133\001\002" +
    "\000\010\027\uffb5\033\uffb5\054\143\001\002\000\024\026" +
    "\140\032\103\055\123\060\126\061\135\062\107\063\137" +
    "\064\122\065\133\001\002\000\010\027\uffb4\033\uffb4\054" +
    "\143\001\002\000\006\027\uffb8\033\uffb8\001\002\000\024" +
    "\026\140\032\103\055\123\060\126\061\135\062\107\063" +
    "\137\064\122\065\133\001\002\000\010\027\uffb6\033\uffb6" +
    "\054\143\001\002\000\006\027\uffb9\033\uffb9\001\002\000" +
    "\024\026\140\032\103\055\123\060\126\061\135\062\107" +
    "\063\137\064\122\065\133\001\002\000\010\027\uffb7\033" +
    "\uffb7\054\143\001\002\000\056\026\216\027\uff98\030\215" +
    "\031\uff98\033\uff98\034\uff98\035\uff98\036\uff98\040\uff98\041" +
    "\uff98\042\uff98\043\uff98\044\uff98\045\uff98\046\uff98\047\uff98" +
    "\050\uff98\051\uff98\052\uff98\053\uff98\054\uff98\056\uff98\001" +
    "\002\000\024\026\140\032\103\055\123\060\126\061\135" +
    "\062\107\063\137\064\122\065\133\001\002\000\026\026" +
    "\140\027\225\032\103\055\123\060\126\061\135\062\107" +
    "\063\137\064\122\065\133\001\002\000\054\027\uff97\030" +
    "\220\031\uff97\033\uff97\034\uff97\035\uff97\036\uff97\040\uff97" +
    "\041\uff97\042\uff97\043\uff97\044\uff97\045\uff97\046\uff97\047" +
    "\uff97\050\uff97\051\uff97\052\uff97\053\uff97\054\uff97\056\uff97" +
    "\001\002\000\024\026\140\032\103\055\123\060\126\061" +
    "\135\062\107\063\137\064\122\065\133\001\002\000\006" +
    "\031\222\054\143\001\002\000\054\027\uff8e\030\uff8e\031" +
    "\uff8e\033\uff8e\034\uff8e\035\uff8e\036\uff8e\040\uff8e\041\uff8e" +
    "\042\uff8e\043\uff8e\044\uff8e\045\uff8e\046\uff8e\047\uff8e\050" +
    "\uff8e\051\uff8e\052\uff8e\053\uff8e\054\uff8e\056\uff8e\001\002" +
    "\000\010\027\uffb0\035\uffb0\054\143\001\002\000\006\027" +
    "\227\035\226\001\002\000\052\027\uff96\031\uff96\033\uff96" +
    "\034\uff96\035\uff96\036\uff96\040\uff96\041\uff96\042\uff96\043" +
    "\uff96\044\uff96\045\uff96\046\uff96\047\uff96\050\uff96\051\uff96" +
    "\052\uff96\053\uff96\054\uff96\056\uff96\001\002\000\024\026" +
    "\140\032\103\055\123\060\126\061\135\062\107\063\137" +
    "\064\122\065\133\001\002\000\052\027\uff95\031\uff95\033" +
    "\uff95\034\uff95\035\uff95\036\uff95\040\uff95\041\uff95\042\uff95" +
    "\043\uff95\044\uff95\045\uff95\046\uff95\047\uff95\050\uff95\051" +
    "\uff95\052\uff95\053\uff95\054\uff95\056\uff95\001\002\000\010" +
    "\027\uffb1\035\uffb1\054\143\001\002\000\006\031\232\054" +
    "\143\001\002\000\054\027\uff8d\030\uff8d\031\uff8d\033\uff8d" +
    "\034\uff8d\035\uff8d\036\uff8d\040\uff8d\041\uff8d\042\uff8d\043" +
    "\uff8d\044\uff8d\045\uff8d\046\uff8d\047\uff8d\050\uff8d\051\uff8d" +
    "\052\uff8d\053\uff8d\054\uff8d\056\uff8d\001\002\000\024\026" +
    "\140\032\103\055\123\060\126\061\135\062\107\063\137" +
    "\064\122\065\133\001\002\000\010\027\uffb3\033\uffb3\054" +
    "\143\001\002\000\024\026\140\032\103\055\123\060\126" +
    "\061\135\062\107\063\137\064\122\065\133\001\002\000" +
    "\006\033\237\054\143\001\002\000\010\027\241\032\103" +
    "\062\107\001\002\000\004\027\273\001\002\000\042\003" +
    "\255\013\067\015\105\016\061\017\064\021\254\023\072" +
    "\024\247\032\103\057\243\062\071\066\025\067\040\070" +
    "\026\072\032\073\041\001\002\000\004\033\272\001\002" +
    "\000\024\026\140\032\103\055\123\060\126\061\135\062" +
    "\107\063\137\064\122\065\133\001\002\000\046\003\uff74" +
    "\013\uff74\015\uff74\016\uff74\017\uff74\020\uff74\021\uff74\022" +
    "\uff74\023\uff74\025\uff74\032\uff74\057\uff74\062\uff74\066\uff74" +
    "\067\uff74\070\uff74\072\uff74\073\uff74\001\002\000\046\003" +
    "\uff71\013\uff71\015\uff71\016\uff71\017\uff71\020\uff71\021\uff71" +
    "\022\uff71\023\uff71\025\uff71\032\uff71\057\uff71\062\uff71\066" +
    "\uff71\067\uff71\070\uff71\072\uff71\073\uff71\001\002\000\004" +
    "\033\267\001\002\000\040\003\255\013\067\015\105\016" +
    "\061\017\064\021\254\023\072\032\103\057\243\062\071" +
    "\066\025\067\040\070\026\072\032\073\041\001\002\000" +
    "\046\003\uff73\013\uff73\015\uff73\016\uff73\017\uff73\020\uff73" +
    "\021\uff73\022\uff73\023\uff73\025\uff73\032\uff73\057\uff73\062" +
    "\uff73\066\uff73\067\uff73\070\uff73\072\uff73\073\uff73\001\002" +
    "\000\046\003\uffc6\013\uffc6\015\uffc6\016\uffc6\017\uffc6\020" +
    "\uffc6\021\uffc6\022\uffc6\023\uffc6\025\uffc6\032\uffc6\057\uffc6" +
    "\062\uffc6\066\uffc6\067\uffc6\070\uffc6\072\uffc6\073\uffc6\001" +
    "\002\000\046\003\uff72\013\uff72\015\uff72\016\uff72\017\uff72" +
    "\020\uff72\021\uff72\022\uff72\023\uff72\025\uff72\032\uff72\057" +
    "\uff72\062\uff72\066\uff72\067\uff72\070\uff72\072\uff72\073\uff72" +
    "\001\002\000\004\033\262\001\002\000\004\033\261\001" +
    "\002\000\006\025\257\033\260\001\002\000\046\003\uff75" +
    "\013\uff75\015\uff75\016\uff75\017\uff75\020\uff75\021\uff75\022" +
    "\uff75\023\uff75\025\uff75\032\uff75\057\uff75\062\uff75\066\uff75" +
    "\067\uff75\070\uff75\072\uff75\073\uff75\001\002\000\046\003" +
    "\uff6b\013\uff6b\015\uff6b\016\uff6b\017\uff6b\020\uff6b\021\uff6b" +
    "\022\uff6b\023\uff6b\025\uff6b\032\uff6b\057\uff6b\062\uff6b\066" +
    "\uff6b\067\uff6b\070\uff6b\072\uff6b\073\uff6b\001\002\000\046" +
    "\003\uff6a\013\uff6a\015\uff6a\016\uff6a\017\uff6a\020\uff6a\021" +
    "\uff6a\022\uff6a\023\uff6a\025\uff6a\032\uff6a\057\uff6a\062\uff6a" +
    "\066\uff6a\067\uff6a\070\uff6a\072\uff6a\073\uff6a\001\002\000" +
    "\046\003\uff6d\013\uff6d\015\uff6d\016\uff6d\017\uff6d\020\uff6d" +
    "\021\uff6d\022\uff6d\023\uff6d\025\uff6d\032\uff6d\057\uff6d\062" +
    "\uff6d\066\uff6d\067\uff6d\070\uff6d\072\uff6d\073\uff6d\001\002" +
    "\000\046\003\uff6f\013\uff6f\015\uff6f\016\uff6f\017\uff6f\020" +
    "\uff6f\021\uff6f\022\uff6f\023\uff6f\025\uff6f\032\uff6f\057\uff6f" +
    "\062\uff6f\066\uff6f\067\uff6f\070\uff6f\072\uff6f\073\uff6f\001" +
    "\002\000\046\003\uff76\013\uff76\015\uff76\016\uff76\017\uff76" +
    "\020\uff76\021\uff76\022\uff76\023\uff76\025\uff76\032\uff76\057" +
    "\uff76\062\uff76\066\uff76\067\uff76\070\uff76\072\uff76\073\uff76" +
    "\001\002\000\042\003\255\013\067\015\105\016\061\017" +
    "\064\021\254\023\072\025\265\032\103\057\243\062\071" +
    "\066\025\067\040\070\026\072\032\073\041\001\002\000" +
    "\046\003\uffc7\013\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7" +
    "\021\uffc7\022\uffc7\023\uffc7\025\uffc7\032\uffc7\057\uffc7\062" +
    "\uffc7\066\uffc7\067\uffc7\070\uffc7\072\uffc7\073\uffc7\001\002" +
    "\000\046\003\uff77\013\uff77\015\uff77\016\uff77\017\uff77\020" +
    "\uff77\021\uff77\022\uff77\023\uff77\025\uff77\032\uff77\057\uff77" +
    "\062\uff77\066\uff77\067\uff77\070\uff77\072\uff77\073\uff77\001" +
    "\002\000\046\003\uff70\013\uff70\015\uff70\016\uff70\017\uff70" +
    "\020\uff70\021\uff70\022\uff70\023\uff70\025\uff70\032\uff70\057" +
    "\uff70\062\uff70\066\uff70\067\uff70\070\uff70\072\uff70\073\uff70" +
    "\001\002\000\006\033\271\054\143\001\002\000\046\003" +
    "\uff6c\013\uff6c\015\uff6c\016\uff6c\017\uff6c\020\uff6c\021\uff6c" +
    "\022\uff6c\023\uff6c\025\uff6c\032\uff6c\057\uff6c\062\uff6c\066" +
    "\uff6c\067\uff6c\070\uff6c\072\uff6c\073\uff6c\001\002\000\046" +
    "\003\uff6e\013\uff6e\015\uff6e\016\uff6e\017\uff6e\020\uff6e\021" +
    "\uff6e\022\uff6e\023\uff6e\025\uff6e\032\uff6e\057\uff6e\062\uff6e" +
    "\066\uff6e\067\uff6e\070\uff6e\072\uff6e\073\uff6e\001\002\000" +
    "\042\003\255\013\067\015\105\016\061\017\064\021\254" +
    "\023\072\024\274\032\103\057\243\062\071\066\025\067" +
    "\040\070\026\072\032\073\041\001\002\000\040\003\255" +
    "\013\067\015\105\016\061\017\064\021\254\023\072\032" +
    "\103\057\243\062\071\066\025\067\040\070\026\072\032" +
    "\073\041\001\002\000\046\003\uffc8\013\uffc8\015\uffc8\016" +
    "\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\025\uffc8" +
    "\032\uffc8\057\uffc8\062\uffc8\066\uffc8\067\uffc8\070\uffc8\072" +
    "\uffc8\073\uffc8\001\002\000\042\003\255\013\067\015\105" +
    "\016\061\017\064\021\254\023\072\025\277\032\103\057" +
    "\243\062\071\066\025\067\040\070\026\072\032\073\041" +
    "\001\002\000\046\003\uffc9\013\uffc9\015\uffc9\016\uffc9\017" +
    "\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\025\uffc9\032\uffc9" +
    "\057\uffc9\062\uffc9\066\uffc9\067\uffc9\070\uffc9\072\uffc9\073" +
    "\uffc9\001\002\000\026\026\140\027\303\032\103\055\123" +
    "\060\126\061\135\062\107\063\137\064\122\065\133\001" +
    "\002\000\054\027\uff94\030\220\031\uff94\033\uff94\034\uff94" +
    "\035\uff94\036\uff94\040\uff94\041\uff94\042\uff94\043\uff94\044" +
    "\uff94\045\uff94\046\uff94\047\uff94\050\uff94\051\uff94\052\uff94" +
    "\053\uff94\054\uff94\056\uff94\001\002\000\006\027\304\035" +
    "\226\001\002\000\052\027\uff93\031\uff93\033\uff93\034\uff93" +
    "\035\uff93\036\uff93\040\uff93\041\uff93\042\uff93\043\uff93\044" +
    "\uff93\045\uff93\046\uff93\047\uff93\050\uff93\051\uff93\052\uff93" +
    "\053\uff93\054\uff93\056\uff93\001\002\000\052\027\uff91\031" +
    "\uff91\033\uff91\034\uff91\035\uff91\036\uff91\040\uff91\041\uff91" +
    "\042\uff91\043\uff91\044\uff91\045\uff91\046\uff91\047\uff91\050" +
    "\uff91\051\uff91\052\uff91\053\uff91\054\uff91\056\uff91\001\002" +
    "\000\004\062\306\001\002\000\012\030\043\033\uff84\035" +
    "\uff84\056\310\001\002\000\010\030\312\033\uff83\035\uff83" +
    "\001\002\000\024\026\140\032\103\055\123\060\126\061" +
    "\135\062\107\063\137\064\122\065\133\001\002\000\010" +
    "\033\uff85\035\uff85\054\143\001\002\000\004\063\313\001" +
    "\002\000\004\031\314\001\002\000\010\030\uff79\033\uff79" +
    "\035\uff79\001\002\000\004\026\316\001\002\000\026\026" +
    "\140\027\320\032\103\055\123\060\126\061\135\062\107" +
    "\063\137\064\122\065\133\001\002\000\006\027\321\035" +
    "\226\001\002\000\052\027\uff92\031\uff92\033\uff92\034\uff92" +
    "\035\uff92\036\uff92\040\uff92\041\uff92\042\uff92\043\uff92\044" +
    "\uff92\045\uff92\046\uff92\047\uff92\050\uff92\051\uff92\052\uff92" +
    "\053\uff92\054\uff92\056\uff92\001\002\000\052\027\uff90\031" +
    "\uff90\033\uff90\034\uff90\035\uff90\036\uff90\040\uff90\041\uff90" +
    "\042\uff90\043\uff90\044\uff90\045\uff90\046\uff90\047\uff90\050" +
    "\uff90\051\uff90\052\uff90\053\uff90\054\uff90\056\uff90\001\002" +
    "\000\030\007\uffe8\010\uffe8\011\uffe8\025\uffe8\062\uffe8\066" +
    "\uffe8\067\uffe8\070\uffe8\072\uffe8\073\uffe8\074\uffe8\001\002" +
    "\000\040\003\uffdd\013\uffdd\015\uffdd\016\uffdd\017\uffdd\023" +
    "\uffdd\025\uffdd\032\uffdd\057\uffdd\062\uffdd\066\uffdd\067\uffdd" +
    "\070\uffdd\072\uffdd\073\uffdd\001\002\000\046\003\uffd2\013" +
    "\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2" +
    "\023\uffd2\025\uffd2\032\uffd2\057\uffd2\062\uffd2\066\uffd2\067" +
    "\uffd2\070\uffd2\072\uffd2\073\uffd2\001\002\000\046\003\uffd1" +
    "\013\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022" +
    "\uffd1\023\uffd1\025\uffd1\032\uffd1\057\uffd1\062\uffd1\066\uffd1" +
    "\067\uffd1\070\uffd1\072\uffd1\073\uffd1\001\002\000\046\003" +
    "\uffd5\013\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5" +
    "\022\uffd5\023\uffd5\025\uffd5\032\uffd5\057\uffd5\062\uffd5\066" +
    "\uffd5\067\uffd5\070\uffd5\072\uffd5\073\uffd5\001\002\000\046" +
    "\003\uffd6\013\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021" +
    "\uffd6\022\uffd6\023\uffd6\025\uffd6\032\uffd6\057\uffd6\062\uffd6" +
    "\066\uffd6\067\uffd6\070\uffd6\072\uffd6\073\uffd6\001\002\000" +
    "\040\003\255\013\067\015\105\016\061\017\064\021\254" +
    "\023\072\032\103\057\243\062\071\066\025\067\040\070" +
    "\026\072\032\073\041\001\002\000\042\003\255\013\067" +
    "\015\105\016\061\017\064\021\254\023\072\025\332\032" +
    "\103\057\243\062\071\066\025\067\040\070\026\072\032" +
    "\073\041\001\002\000\004\016\333\001\002\000\004\026" +
    "\334\001\002\000\024\026\140\032\103\055\123\060\126" +
    "\061\135\062\107\063\137\064\122\065\133\001\002\000" +
    "\006\027\336\054\143\001\002\000\046\003\uffc3\013\uffc3" +
    "\015\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023" +
    "\uffc3\025\uffc3\032\uffc3\057\uffc3\062\uffc3\066\uffc3\067\uffc3" +
    "\070\uffc3\072\uffc3\073\uffc3\001\002\000\024\026\140\032" +
    "\103\055\123\060\126\061\135\062\107\063\137\064\122" +
    "\065\133\001\002\000\006\027\341\054\143\001\002\000" +
    "\040\003\100\013\067\015\105\016\061\017\064\023\072" +
    "\024\342\032\103\057\063\062\071\066\025\067\040\070" +
    "\026\072\032\073\041\001\002\000\036\003\100\013\067" +
    "\015\105\016\061\017\064\023\072\032\103\057\063\062" +
    "\071\066\025\067\040\070\026\072\032\073\041\001\002" +
    "\000\046\003\uffcf\013\uffcf\015\uffcf\016\uffcf\017\uffcf\020" +
    "\uffcf\021\uffcf\022\uffcf\023\uffcf\025\uffcf\032\uffcf\057\uffcf" +
    "\062\uffcf\066\uffcf\067\uffcf\070\uffcf\072\uffcf\073\uffcf\001" +
    "\002\000\040\003\100\013\067\015\105\016\061\017\064" +
    "\023\072\025\345\032\103\057\063\062\071\066\025\067" +
    "\040\070\026\072\032\073\041\001\002\000\050\003\uffd0" +
    "\013\uffd0\014\346\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021" +
    "\uffd0\022\uffd0\023\uffd0\025\uffd0\032\uffd0\057\uffd0\062\uffd0" +
    "\066\uffd0\067\uffd0\070\uffd0\072\uffd0\073\uffd0\001\002\000" +
    "\006\013\364\024\363\001\002\000\050\003\uffcd\013\uffcd" +
    "\014\350\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022" +
    "\uffcd\023\uffcd\025\uffcd\032\uffcd\057\uffcd\062\uffcd\066\uffcd" +
    "\067\uffcd\070\uffcd\072\uffcd\073\uffcd\001\002\000\006\013" +
    "\352\024\351\001\002\000\036\003\100\013\067\015\105" +
    "\016\061\017\064\023\072\032\103\057\063\062\071\066" +
    "\025\067\040\070\026\072\032\073\041\001\002\000\004" +
    "\026\353\001\002\000\024\026\140\032\103\055\123\060" +
    "\126\061\135\062\107\063\137\064\122\065\133\001\002" +
    "\000\006\027\355\054\143\001\002\000\004\024\356\001" +
    "\002\000\036\003\100\013\067\015\105\016\061\017\064" +
    "\023\072\032\103\057\063\062\071\066\025\067\040\070" +
    "\026\072\032\073\041\001\002\000\040\003\100\013\067" +
    "\015\105\016\061\017\064\023\072\025\360\032\103\057" +
    "\063\062\071\066\025\067\040\070\026\072\032\073\041" +
    "\001\002\000\050\003\uffcb\013\uffcb\014\uffcb\015\uffcb\016" +
    "\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\025\uffcb" +
    "\032\uffcb\057\uffcb\062\uffcb\066\uffcb\067\uffcb\070\uffcb\072" +
    "\uffcb\073\uffcb\001\002\000\040\003\100\013\067\015\105" +
    "\016\061\017\064\023\072\025\362\032\103\057\063\062" +
    "\071\066\025\067\040\070\026\072\032\073\041\001\002" +
    "\000\046\003\uffcc\013\uffcc\015\uffcc\016\uffcc\017\uffcc\020" +
    "\uffcc\021\uffcc\022\uffcc\023\uffcc\025\uffcc\032\uffcc\057\uffcc" +
    "\062\uffcc\066\uffcc\067\uffcc\070\uffcc\072\uffcc\073\uffcc\001" +
    "\002\000\036\003\100\013\067\015\105\016\061\017\064" +
    "\023\072\032\103\057\063\062\071\066\025\067\040\070" +
    "\026\072\032\073\041\001\002\000\004\026\365\001\002" +
    "\000\024\026\140\032\103\055\123\060\126\061\135\062" +
    "\107\063\137\064\122\065\133\001\002\000\006\027\367" +
    "\054\143\001\002\000\004\024\370\001\002\000\036\003" +
    "\100\013\067\015\105\016\061\017\064\023\072\032\103" +
    "\057\063\062\071\066\025\067\040\070\026\072\032\073" +
    "\041\001\002\000\040\003\100\013\067\015\105\016\061" +
    "\017\064\023\072\025\372\032\103\057\063\062\071\066" +
    "\025\067\040\070\026\072\032\073\041\001\002\000\050" +
    "\003\uffca\013\uffca\014\uffca\015\uffca\016\uffca\017\uffca\020" +
    "\uffca\021\uffca\022\uffca\023\uffca\025\uffca\032\uffca\057\uffca" +
    "\062\uffca\066\uffca\067\uffca\070\uffca\072\uffca\073\uffca\001" +
    "\002\000\040\003\100\013\067\015\105\016\061\017\064" +
    "\023\072\025\374\032\103\057\063\062\071\066\025\067" +
    "\040\070\026\072\032\073\041\001\002\000\046\003\uffce" +
    "\013\uffce\015\uffce\016\uffce\017\uffce\020\uffce\021\uffce\022" +
    "\uffce\023\uffce\025\uffce\032\uffce\057\uffce\062\uffce\066\uffce" +
    "\067\uffce\070\uffce\072\uffce\073\uffce\001\002\000\024\026" +
    "\140\032\103\055\123\060\126\061\135\062\107\063\137" +
    "\064\122\065\133\001\002\000\006\027\uffc2\054\143\001" +
    "\002\000\004\027\u0100\001\002\000\004\024\u0101\001\002" +
    "\000\006\020\u0105\022\u0102\001\002\000\004\034\u010d\001" +
    "\002\000\010\020\u0105\022\u0102\025\uffbe\001\002\000\004" +
    "\025\uffbd\001\002\000\024\026\140\032\103\055\123\060" +
    "\126\061\135\062\107\063\137\064\122\065\133\001\002" +
    "\000\004\025\u0107\001\002\000\046\003\uffc1\013\uffc1\015" +
    "\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1" +
    "\025\uffc1\032\uffc1\057\uffc1\062\uffc1\066\uffc1\067\uffc1\070" +
    "\uffc1\072\uffc1\073\uffc1\001\002\000\006\034\u0109\054\143" +
    "\001\002\000\040\003\255\013\067\015\105\016\061\017" +
    "\064\021\254\023\072\032\103\057\243\062\071\066\025" +
    "\067\040\070\026\072\032\073\041\001\002\000\046\003" +
    "\255\013\067\015\105\016\061\017\064\020\uffc0\021\254" +
    "\022\uffc0\023\072\025\uffc0\032\103\057\243\062\071\066" +
    "\025\067\040\070\026\072\032\073\041\001\002\000\010" +
    "\020\uffbc\022\uffbc\025\uffbc\001\002\000\004\025\uffbf\001" +
    "\002\000\040\003\255\013\067\015\105\016\061\017\064" +
    "\021\254\023\072\032\103\057\243\062\071\066\025\067" +
    "\040\070\026\072\032\073\041\001\002\000\004\025\uffbb" +
    "\001\002\000\006\033\u0110\054\143\001\002\000\046\003" +
    "\uffd3\013\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3" +
    "\022\uffd3\023\uffd3\025\uffd3\032\uffd3\057\uffd3\062\uffd3\066" +
    "\uffd3\067\uffd3\070\uffd3\072\uffd3\073\uffd3\001\002\000\046" +
    "\003\uffd4\013\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021" +
    "\uffd4\022\uffd4\023\uffd4\025\uffd4\032\uffd4\057\uffd4\062\uffd4" +
    "\066\uffd4\067\uffd4\070\uffd4\072\uffd4\073\uffd4\001\002\000" +
    "\024\026\140\032\103\055\123\060\126\061\135\062\107" +
    "\063\137\064\122\065\133\001\002\000\006\027\u0114\054" +
    "\143\001\002\000\042\003\255\013\067\015\105\016\061" +
    "\017\064\021\254\023\072\024\u0115\032\103\057\243\062" +
    "\071\066\025\067\040\070\026\072\032\073\041\001\002" +
    "\000\040\003\255\013\067\015\105\016\061\017\064\021" +
    "\254\023\072\032\103\057\243\062\071\066\025\067\040" +
    "\070\026\072\032\073\041\001\002\000\046\003\uffc4\013" +
    "\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4" +
    "\023\uffc4\025\uffc4\032\uffc4\057\uffc4\062\uffc4\066\uffc4\067" +
    "\uffc4\070\uffc4\072\uffc4\073\uffc4\001\002\000\042\003\255" +
    "\013\067\015\105\016\061\017\064\021\254\023\072\025" +
    "\u0118\032\103\057\243\062\071\066\025\067\040\070\026" +
    "\072\032\073\041\001\002\000\046\003\uffc5\013\uffc5\015" +
    "\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5" +
    "\025\uffc5\032\uffc5\057\uffc5\062\uffc5\066\uffc5\067\uffc5\070" +
    "\uffc5\072\uffc5\073\uffc5\001\002\000\012\030\043\033\uff81" +
    "\035\uff81\056\u011b\001\002\000\010\030\312\033\uff82\035" +
    "\uff82\001\002\000\024\026\140\032\103\055\123\060\126" +
    "\061\135\062\107\063\137\064\122\065\133\001\002\000" +
    "\010\033\uff80\035\uff80\054\143\001\002\000\006\037\u011f" +
    "\062\u011e\001\002\000\006\027\uffe5\035\uffe5\001\002\000" +
    "\004\062\u0120\001\002\000\006\027\uffe4\035\uffe4\001\002" +
    "\000\036\003\100\013\067\015\105\016\061\017\064\023" +
    "\072\032\103\057\063\062\071\066\025\067\040\070\026" +
    "\072\032\073\041\001\002\000\040\003\100\013\067\015" +
    "\105\016\061\017\064\023\072\025\u0123\032\103\057\063" +
    "\062\071\066\025\067\040\070\026\072\032\073\041\001" +
    "\002\000\030\007\uffea\010\uffea\011\uffea\025\uffea\062\uffea" +
    "\066\uffea\067\uffea\070\uffea\072\uffea\073\uffea\074\uffea\001" +
    "\002\000\030\007\uffef\010\uffef\011\uffef\025\uffef\062\uffef" +
    "\066\uffef\067\uffef\070\uffef\072\uffef\073\uffef\074\uffef\001" +
    "\002\000\004\031\u0126\001\002\000\010\030\uff78\033\uff78" +
    "\035\uff78\001\002\000\004\062\u0134\001\002\000\004\062" +
    "\u0129\001\002\000\004\026\u012a\001\002\000\020\027\u012b" +
    "\062\033\066\025\067\040\070\026\072\032\073\041\001" +
    "\002\000\004\024\u0131\001\002\000\006\027\u012d\035\055" +
    "\001\002\000\004\024\u012e\001\002\000\036\003\100\013" +
    "\067\015\105\016\061\017\064\023\072\032\103\057\063" +
    "\062\071\066\025\067\040\070\026\072\032\073\041\001" +
    "\002\000\040\003\100\013\067\015\105\016\061\017\064" +
    "\023\072\025\u0130\032\103\057\063\062\071\066\025\067" +
    "\040\070\026\072\032\073\041\001\002\000\030\007\uffe7" +
    "\010\uffe7\011\uffe7\025\uffe7\062\uffe7\066\uffe7\067\uffe7\070" +
    "\uffe7\072\uffe7\073\uffe7\074\uffe7\001\002\000\036\003\100" +
    "\013\067\015\105\016\061\017\064\023\072\032\103\057" +
    "\063\062\071\066\025\067\040\070\026\072\032\073\041" +
    "\001\002\000\040\003\100\013\067\015\105\016\061\017" +
    "\064\023\072\025\u0133\032\103\057\063\062\071\066\025" +
    "\067\040\070\026\072\032\073\041\001\002\000\030\007" +
    "\uffec\010\uffec\011\uffec\025\uffec\062\uffec\066\uffec\067\uffec" +
    "\070\uffec\072\uffec\073\uffec\074\uffec\001\002\000\010\026" +
    "\u0136\030\043\033\u0137\001\002\000\006\030\312\033\u0141" +
    "\001\002\000\020\027\u0138\062\033\066\025\067\040\070" +
    "\026\072\032\073\041\001\002\000\030\007\ufff1\010\ufff1" +
    "\011\ufff1\025\ufff1\062\ufff1\066\ufff1\067\ufff1\070\ufff1\072" +
    "\ufff1\073\ufff1\074\ufff1\001\002\000\004\024\u013e\001\002" +
    "\000\006\027\u013a\035\055\001\002\000\004\024\u013b\001" +
    "\002\000\036\003\100\013\067\015\105\016\061\017\064" +
    "\023\072\032\103\057\063\062\071\066\025\067\040\070" +
    "\026\072\032\073\041\001\002\000\040\003\100\013\067" +
    "\015\105\016\061\017\064\023\072\025\u013d\032\103\057" +
    "\063\062\071\066\025\067\040\070\026\072\032\073\041" +
    "\001\002\000\030\007\uffe9\010\uffe9\011\uffe9\025\uffe9\062" +
    "\uffe9\066\uffe9\067\uffe9\070\uffe9\072\uffe9\073\uffe9\074\uffe9" +
    "\001\002\000\036\003\100\013\067\015\105\016\061\017" +
    "\064\023\072\032\103\057\063\062\071\066\025\067\040" +
    "\070\026\072\032\073\041\001\002\000\040\003\100\013" +
    "\067\015\105\016\061\017\064\023\072\025\u0140\032\103" +
    "\057\063\062\071\066\025\067\040\070\026\072\032\073" +
    "\041\001\002\000\030\007\uffed\010\uffed\011\uffed\025\uffed" +
    "\062\uffed\066\uffed\067\uffed\070\uffed\072\uffed\073\uffed\074" +
    "\uffed\001\002\000\030\007\ufff0\010\ufff0\011\ufff0\025\ufff0" +
    "\062\ufff0\066\ufff0\067\ufff0\070\ufff0\072\ufff0\073\ufff0\074" +
    "\ufff0\001\002\000\004\026\u0143\001\002\000\020\027\u0144" +
    "\062\033\066\025\067\040\070\026\072\032\073\041\001" +
    "\002\000\004\024\u014a\001\002\000\006\027\u0146\035\055" +
    "\001\002\000\004\024\u0147\001\002\000\036\003\100\013" +
    "\067\015\105\016\061\017\064\023\072\032\103\057\063" +
    "\062\071\066\025\067\040\070\026\072\032\073\041\001" +
    "\002\000\040\003\100\013\067\015\105\016\061\017\064" +
    "\023\072\025\u0149\032\103\057\063\062\071\066\025\067" +
    "\040\070\026\072\032\073\041\001\002\000\030\007\uffe6" +
    "\010\uffe6\011\uffe6\025\uffe6\062\uffe6\066\uffe6\067\uffe6\070" +
    "\uffe6\072\uffe6\073\uffe6\074\uffe6\001\002\000\036\003\100" +
    "\013\067\015\105\016\061\017\064\023\072\032\103\057" +
    "\063\062\071\066\025\067\040\070\026\072\032\073\041" +
    "\001\002\000\040\003\100\013\067\015\105\016\061\017" +
    "\064\023\072\025\u014c\032\103\057\063\062\071\066\025" +
    "\067\040\070\026\072\032\073\041\001\002\000\030\007" +
    "\uffeb\010\uffeb\011\uffeb\025\uffeb\062\uffeb\066\uffeb\067\uffeb" +
    "\070\uffeb\072\uffeb\073\uffeb\074\uffeb\001\002\000\030\007" +
    "\ufff7\010\ufff7\011\ufff7\025\ufff7\062\ufff7\066\ufff7\067\ufff7" +
    "\070\ufff7\072\ufff7\073\ufff7\074\ufff7\001\002\000\006\002" +
    "\ufff8\005\ufff8\001\002\000\030\007\ufff6\010\ufff6\011\ufff6" +
    "\025\ufff6\062\ufff6\066\ufff6\067\ufff6\070\ufff6\072\ufff6\073" +
    "\ufff6\074\ufff6\001\002\000\030\007\024\010\036\011\035" +
    "\025\u0151\062\033\066\025\067\040\070\026\072\032\073" +
    "\041\074\031\001\002\000\006\002\ufff9\005\ufff9\001\002" +
    "\000\004\002\001\001\002\000\004\036\u0154\001\002\000" +
    "\004\062\u0155\001\002\000\004\033\u0156\001\002\000\006" +
    "\004\ufffa\005\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0154\000\014\003\006\004\011\055\003\056\010\057" +
    "\005\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\004\011\055\012\057\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\005\u014f\007\022\011\026" +
    "\012\033\054\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\005\027\007\022\011\026\012\033\054\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\007\u014c" +
    "\011\u014e\012\033\054\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\054\u0126\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\036\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\047\054" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\054\u011c\001\001\000\002" +
    "\001\001\000\034\014\100\015\076\020\101\023\065\024" +
    "\073\025\074\026\067\033\072\034\075\035\103\037\061" +
    "\050\064\054\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\041\u010e\042\120\043\123" +
    "\044\127\045\135\046\133\047\130\050\126\051\124\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\052\300\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\015\322\020\101\023\065\024\073" +
    "\025\074\026\067\033\072\034\075\035\103\037\061\050" +
    "\064\054\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\033\107\050" +
    "\110\001\001\000\004\052\300\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\041\131\042\120\043\123\044\127\045" +
    "\135\046\133\047\130\050\126\051\124\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\041\140\042\120\043" +
    "\123\044\127\045\135\046\133\047\130\050\126\051\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\042" +
    "\143\043\123\044\127\045\135\046\133\047\130\050\126" +
    "\051\124\001\001\000\002\001\001\000\020\043\145\044" +
    "\127\045\135\046\133\047\130\050\126\051\124\001\001" +
    "\000\002\001\001\000\016\044\173\045\135\046\133\047" +
    "\130\050\126\051\124\001\001\000\016\044\150\045\135" +
    "\046\133\047\130\050\126\051\124\001\001\000\002\001" +
    "\001\000\014\045\172\046\133\047\130\050\126\051\124" +
    "\001\001\000\014\045\171\046\133\047\130\050\126\051" +
    "\124\001\001\000\014\045\170\046\133\047\130\050\126" +
    "\051\124\001\001\000\014\045\155\046\133\047\130\050" +
    "\126\051\124\001\001\000\002\001\001\000\012\046\167" +
    "\047\130\050\126\051\124\001\001\000\012\046\160\047" +
    "\130\050\126\051\124\001\001\000\002\001\001\000\010" +
    "\047\166\050\126\051\124\001\001\000\010\047\165\050" +
    "\126\051\124\001\001\000\010\047\164\050\126\051\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\041\177\042\120\043\123\044\127" +
    "\045\135\046\133\047\130\050\126\051\124\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\041\202\042\120" +
    "\043\123\044\127\045\135\046\133\047\130\050\126\051" +
    "\124\001\001\000\002\001\001\000\024\041\204\042\120" +
    "\043\123\044\127\045\135\046\133\047\130\050\126\051" +
    "\124\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\041\207\042\120\043\123\044\127\045\135\046\133\047" +
    "\130\050\126\051\124\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\041\212\042\120\043\123\044\127\045" +
    "\135\046\133\047\130\050\126\051\124\001\001\000\002" +
    "\001\001\000\004\052\216\001\001\000\024\041\230\042" +
    "\120\043\123\044\127\045\135\046\133\047\130\050\126" +
    "\051\124\001\001\000\026\040\223\041\222\042\120\043" +
    "\123\044\127\045\135\046\133\047\130\050\126\051\124" +
    "\001\001\000\002\001\001\000\024\041\220\042\120\043" +
    "\123\044\127\045\135\046\133\047\130\050\126\051\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\041\227" +
    "\042\120\043\123\044\127\045\135\046\133\047\130\050" +
    "\126\051\124\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\041\233\042" +
    "\120\043\123\044\127\045\135\046\133\047\130\050\126" +
    "\051\124\001\001\000\002\001\001\000\024\041\235\042" +
    "\120\043\123\044\127\045\135\046\133\047\130\050\126" +
    "\051\124\001\001\000\002\001\001\000\006\033\237\050" +
    "\110\001\001\000\002\001\001\000\032\017\250\020\255" +
    "\023\243\024\247\025\251\026\244\033\245\034\252\035" +
    "\103\037\241\050\064\054\057\001\001\000\002\001\001" +
    "\000\024\041\267\042\120\043\123\044\127\045\135\046" +
    "\133\047\130\050\126\051\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\016\263\017" +
    "\262\020\255\023\243\024\247\025\251\026\244\033\245" +
    "\034\252\035\103\037\241\050\064\054\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\017\265\020" +
    "\255\023\243\024\247\025\251\026\244\033\245\034\252" +
    "\035\103\037\241\050\064\054\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\017\274\020" +
    "\255\023\243\024\247\025\251\026\244\033\245\034\252" +
    "\035\103\037\241\050\064\054\057\001\001\000\034\016" +
    "\275\017\262\020\255\023\243\024\247\025\251\026\244" +
    "\033\245\034\252\035\103\037\241\050\064\054\057\001" +
    "\001\000\002\001\001\000\032\017\265\020\255\023\243" +
    "\024\247\025\251\026\244\033\245\034\252\035\103\037" +
    "\241\050\064\054\057\001\001\000\002\001\001\000\026" +
    "\040\301\041\222\042\120\043\123\044\127\045\135\046" +
    "\133\047\130\050\126\051\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\036\306\001\001\000\002\001\001" +
    "\000\024\041\310\042\120\043\123\044\127\045\135\046" +
    "\133\047\130\050\126\051\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\040\316\041\222\042\120\043\123" +
    "\044\127\045\135\046\133\047\130\050\126\051\124\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\016\330\017\262\020\255\023\243\024\247\025\251\026" +
    "\244\033\245\034\252\035\103\037\241\050\064\054\057" +
    "\001\001\000\032\017\265\020\255\023\243\024\247\025" +
    "\251\026\244\033\245\034\252\035\103\037\241\050\064" +
    "\054\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\041\334\042\120\043\123\044\127\045\135\046\133" +
    "\047\130\050\126\051\124\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\041\337\042\120\043\123\044\127" +
    "\045\135\046\133\047\130\050\126\051\124\001\001\000" +
    "\002\001\001\000\032\015\342\020\101\023\065\024\073" +
    "\025\074\026\067\033\072\034\075\035\103\037\061\050" +
    "\064\054\057\001\001\000\034\014\343\015\076\020\101" +
    "\023\065\024\073\025\074\026\067\033\072\034\075\035" +
    "\103\037\061\050\064\054\057\001\001\000\002\001\001" +
    "\000\032\015\322\020\101\023\065\024\073\025\074\026" +
    "\067\033\072\034\075\035\103\037\061\050\064\054\057" +
    "\001\001\000\004\022\346\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\014\360\015\076" +
    "\020\101\023\065\024\073\025\074\026\067\033\072\034" +
    "\075\035\103\037\061\050\064\054\057\001\001\000\002" +
    "\001\001\000\024\041\353\042\120\043\123\044\127\045" +
    "\135\046\133\047\130\050\126\051\124\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\014\356\015\076\020" +
    "\101\023\065\024\073\025\074\026\067\033\072\034\075" +
    "\035\103\037\061\050\064\054\057\001\001\000\032\015" +
    "\322\020\101\023\065\024\073\025\074\026\067\033\072" +
    "\034\075\035\103\037\061\050\064\054\057\001\001\000" +
    "\002\001\001\000\032\015\322\020\101\023\065\024\073" +
    "\025\074\026\067\033\072\034\075\035\103\037\061\050" +
    "\064\054\057\001\001\000\002\001\001\000\034\014\372" +
    "\015\076\020\101\023\065\024\073\025\074\026\067\033" +
    "\072\034\075\035\103\037\061\050\064\054\057\001\001" +
    "\000\002\001\001\000\024\041\365\042\120\043\123\044" +
    "\127\045\135\046\133\047\130\050\126\051\124\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\014\370\015" +
    "\076\020\101\023\065\024\073\025\074\026\067\033\072" +
    "\034\075\035\103\037\061\050\064\054\057\001\001\000" +
    "\032\015\322\020\101\023\065\024\073\025\074\026\067" +
    "\033\072\034\075\035\103\037\061\050\064\054\057\001" +
    "\001\000\002\001\001\000\032\015\322\020\101\023\065" +
    "\024\073\025\074\026\067\033\072\034\075\035\103\037" +
    "\061\050\064\054\057\001\001\000\002\001\001\000\024" +
    "\041\375\042\120\043\123\044\127\045\135\046\133\047" +
    "\130\050\126\051\124\001\001\000\004\060\376\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\027\u0102\030" +
    "\u0105\032\u0103\001\001\000\002\001\001\000\010\027\u0102" +
    "\030\u010b\032\u0103\001\001\000\002\001\001\000\024\041" +
    "\u0107\042\120\043\123\044\127\045\135\046\133\047\130" +
    "\050\126\051\124\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\016\u0109\017\262\020\255" +
    "\023\243\024\247\025\251\026\244\031\u010a\033\245\034" +
    "\252\035\103\037\241\050\064\054\057\001\001\000\032" +
    "\017\265\020\255\023\243\024\247\025\251\026\244\033" +
    "\245\034\252\035\103\037\241\050\064\054\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\016\u0109\017" +
    "\262\020\255\023\243\024\247\025\251\026\244\031\u010d" +
    "\033\245\034\252\035\103\037\241\050\064\054\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\041\u0112\042\120\043\123\044" +
    "\127\045\135\046\133\047\130\050\126\051\124\001\001" +
    "\000\002\001\001\000\032\017\u0115\020\255\023\243\024" +
    "\247\025\251\026\244\033\245\034\252\035\103\037\241" +
    "\050\064\054\057\001\001\000\034\016\u0116\017\262\020" +
    "\255\023\243\024\247\025\251\026\244\033\245\034\252" +
    "\035\103\037\241\050\064\054\057\001\001\000\002\001" +
    "\001\000\032\017\265\020\255\023\243\024\247\025\251" +
    "\026\244\033\245\034\252\035\103\037\241\050\064\054" +
    "\057\001\001\000\002\001\001\000\004\036\u0119\001\001" +
    "\000\002\001\001\000\024\041\u011b\042\120\043\123\044" +
    "\127\045\135\046\133\047\130\050\126\051\124\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\014\u0121\015\076" +
    "\020\101\023\065\024\073\025\074\026\067\033\072\034" +
    "\075\035\103\037\061\050\064\054\057\001\001\000\032" +
    "\015\322\020\101\023\065\024\073\025\074\026\067\033" +
    "\072\034\075\035\103\037\061\050\064\054\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\u012b\054\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\014\u012e" +
    "\015\076\020\101\023\065\024\073\025\074\026\067\033" +
    "\072\034\075\035\103\037\061\050\064\054\057\001\001" +
    "\000\032\015\322\020\101\023\065\024\073\025\074\026" +
    "\067\033\072\034\075\035\103\037\061\050\064\054\057" +
    "\001\001\000\002\001\001\000\034\014\u0131\015\076\020" +
    "\101\023\065\024\073\025\074\026\067\033\072\034\075" +
    "\035\103\037\061\050\064\054\057\001\001\000\032\015" +
    "\322\020\101\023\065\024\073\025\074\026\067\033\072" +
    "\034\075\035\103\037\061\050\064\054\057\001\001\000" +
    "\002\001\001\000\004\036\u0134\001\001\000\002\001\001" +
    "\000\006\010\u0138\054\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\014\u013b\015\076\020\101\023\065\024\073\025\074\026" +
    "\067\033\072\034\075\035\103\037\061\050\064\054\057" +
    "\001\001\000\032\015\322\020\101\023\065\024\073\025" +
    "\074\026\067\033\072\034\075\035\103\037\061\050\064" +
    "\054\057\001\001\000\002\001\001\000\034\014\u013e\015" +
    "\076\020\101\023\065\024\073\025\074\026\067\033\072" +
    "\034\075\035\103\037\061\050\064\054\057\001\001\000" +
    "\032\015\322\020\101\023\065\024\073\025\074\026\067" +
    "\033\072\034\075\035\103\037\061\050\064\054\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\u0144\054\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\014\u0147\015\076" +
    "\020\101\023\065\024\073\025\074\026\067\033\072\034" +
    "\075\035\103\037\061\050\064\054\057\001\001\000\032" +
    "\015\322\020\101\023\065\024\073\025\074\026\067\033" +
    "\072\034\075\035\103\037\061\050\064\054\057\001\001" +
    "\000\002\001\001\000\034\014\u014a\015\076\020\101\023" +
    "\065\024\073\025\074\026\067\033\072\034\075\035\103" +
    "\037\061\050\064\054\057\001\001\000\032\015\322\020" +
    "\101\023\065\024\073\025\074\026\067\033\072\034\075" +
    "\035\103\037\061\050\064\054\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\007\u014c\011\u014e\012\033\054\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserP$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserP$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserP$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
  
    }


public TablaDeSimbolos TSC=new TablaDeSimbolos();
public Instruccion  ins=new Instruccion();
public String CanonicalPath;
public Exp part;
//public boolean Errores=false;
public Errores err=new Errores();

public void report_error(String msj,Object Info){}
public void report_fatal_error(String msj,Object Info){report_error(msj,Info);}

public void syntax_error(Symbol s)
{
//this.Errores=true;
Errores.InsertarError(s.left,"Error: No se esperaba: "+s.value.toString());
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserP$actions {





  private final ParserP parser;

  /** Constructor */
  CUP$ParserP$actions(ParserP parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserP$do_action(
    int                        CUP$ParserP$act_num,
    java_cup.runtime.lr_parser CUP$ParserP$parser,
    java.util.Stack            CUP$ParserP$stack,
    int                        CUP$ParserP$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserP$result;

      /* select the action based on the action number */
      switch (CUP$ParserP$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // Instruccion1Case ::= error PCOMA 
            {
              Instruccion RESULT = null;
		RESULT=null;
              CUP$ParserP$result = new java_cup.runtime.Symbol(13/*Instruccion1Case*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // Instruccion1Case ::= error LLC 
            {
              Instruccion RESULT = null;
		RESULT=null;
              CUP$ParserP$result = new java_cup.runtime.Symbol(13/*Instruccion1Case*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // Instruccion1Case ::= RETURN EXP PCOMA 
            {
              Instruccion RESULT = null;
		int a0left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left;
		int a0right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).right;
		String a0 = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).right;
		Exp a1 = (Exp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).value;
		Return ret=new Return(a0left,a1);RESULT=ret;
              CUP$ParserP$result = new java_cup.runtime.Symbol(13/*Instruccion1Case*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // Instruccion1Case ::= BREAK PCOMA 
            {
              Instruccion RESULT = null;
		Break c=new Break(); RESULT=c;
              CUP$ParserP$result = new java_cup.runtime.Symbol(13/*Instruccion1Case*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // Instruccion1Case ::= llamadaProcedimiento1 PCOMA 
            {
              Instruccion RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).right;
		ExpID a = (ExpID)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).value;
		RESULT=a;
              CUP$ParserP$result = new java_cup.runtime.Symbol(13/*Instruccion1Case*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // Instruccion1Case ::= declaracion1 PCOMA 
            {
              Instruccion RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).right;
		Declaracion a = (Declaracion)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).value;
		RESULT=a;
              CUP$ParserP$result = new java_cup.runtime.Symbol(13/*Instruccion1Case*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // Instruccion1Case ::= assigancion1 PCOMA 
            {
              Instruccion RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).right;
		Asignacion a = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).value;
		RESULT=a;
              CUP$ParserP$result = new java_cup.runtime.Symbol(13/*Instruccion1Case*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // Instruccion1Case ::= switch1 
            {
              Instruccion RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		IF a = (IF)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		RESULT=a;
              CUP$ParserP$result = new java_cup.runtime.Symbol(13/*Instruccion1Case*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // Instruccion1Case ::= doWhile 
            {
              Instruccion RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		Loop a = (Loop)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		RESULT=a;
              CUP$ParserP$result = new java_cup.runtime.Symbol(13/*Instruccion1Case*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // Instruccion1Case ::= while1 
            {
              Instruccion RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		Loop a = (Loop)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		RESULT=a;
              CUP$ParserP$result = new java_cup.runtime.Symbol(13/*Instruccion1Case*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // Instruccion1Case ::= for1 
            {
              Instruccion RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		Loop a = (Loop)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		RESULT=a;
              CUP$ParserP$result = new java_cup.runtime.Symbol(13/*Instruccion1Case*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Instruccion1Case ::= if1 
            {
              Instruccion RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		IF a = (IF)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		RESULT=a;
              CUP$ParserP$result = new java_cup.runtime.Symbol(13/*Instruccion1Case*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // ListaInstrucciones1Case ::= Instruccion1Case 
            {
              ListaInstrucciones RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		ListaInstrucciones res=new ListaInstrucciones(); res.List.add(a);RESULT=res;
              CUP$ParserP$result = new java_cup.runtime.Symbol(12/*ListaInstrucciones1Case*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // ListaInstrucciones1Case ::= ListaInstrucciones1Case Instruccion1Case 
            {
              ListaInstrucciones RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).right;
		ListaInstrucciones a = (ListaInstrucciones)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		a.List.add(b);RESULT=a;
              CUP$ParserP$result = new java_cup.runtime.Symbol(12/*ListaInstrucciones1Case*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Dimenciones ::= CA ENTERO CC 
            {
              ListaDim RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).value;
		int a1=Integer.parseInt(a); ListaDim res=new ListaDim(); res.List.add(a1); RESULT=res;
              CUP$ParserP$result = new java_cup.runtime.Symbol(28/*Dimenciones*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Dimenciones ::= Dimenciones CA ENTERO CC 
            {
              ListaDim RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).right;
		ListaDim a = (ListaDim)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).value;
		int b1=Integer.parseInt(b); a.List.add(b1);RESULT=a;
              CUP$ParserP$result = new java_cup.runtime.Symbol(28/*Dimenciones*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Tipo1 ::= BOOL 
            {
              String RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		 RESULT=a;
              CUP$ParserP$result = new java_cup.runtime.Symbol(42/*Tipo1*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Tipo1 ::= FLOAT 
            {
              String RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		 RESULT=a;
              CUP$ParserP$result = new java_cup.runtime.Symbol(42/*Tipo1*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Tipo1 ::= STRING 
            {
              String RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		 RESULT=a;
              CUP$ParserP$result = new java_cup.runtime.Symbol(42/*Tipo1*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Tipo1 ::= ID 
            {
              String RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		 RESULT=a;
              CUP$ParserP$result = new java_cup.runtime.Symbol(42/*Tipo1*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Tipo1 ::= CHAR 
            {
              String RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		 RESULT=a;
              CUP$ParserP$result = new java_cup.runtime.Symbol(42/*Tipo1*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Tipo1 ::= INT 
            {
              String RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		 RESULT=a;
              CUP$ParserP$result = new java_cup.runtime.Symbol(42/*Tipo1*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // listaDeclaracion ::= Tipo1 ID ASIGNA EXP 
            {
              Declaracion RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		 
							      Declaracion res=new Declaracion(b,null); 
							      if(a.equals("bool")){a="int"; res.tipos.Add("bool");} 
							      if(a.equals("string")){a="char";}
							      

							      ExpID Ig=new ExpID(null,b,null,false);
							      Asignacion As=new Asignacion(Ig,c,false);	  

							      res.InicializarDeclaracion=As;
							      res.NoLinea=aleft; 
							      res.Tipo=a; RESULT=res;
							     
              CUP$ParserP$result = new java_cup.runtime.Symbol(27/*listaDeclaracion*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // listaDeclaracion ::= Tipo1 ID 
            {
              Declaracion RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		Declaracion res=new Declaracion(b,null); if(a.equals("string")){a="char";} if(a.equals("bool")){a="int";}   res.Tipo=a; RESULT=res;
              CUP$ParserP$result = new java_cup.runtime.Symbol(27/*listaDeclaracion*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // listaDeclaracion ::= Tipo1 ID Dimenciones 
            {
              Declaracion RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		ListaDim c = (ListaDim)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		
								  Declaracion res; 
								  //if(a.equals("string")){a="char";} 
								  //if(a.equals("bool")){a="int";} 								  
								  res=new Declaracion(b,c.List);
								  res.Tipo=a; RESULT=res;								  
							    
              CUP$ParserP$result = new java_cup.runtime.Symbol(27/*listaDeclaracion*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // listaDeclaracion ::= listaDeclaracion COMA ID Dimenciones 
            {
              Declaracion RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).right;
		Declaracion a = (Declaracion)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		ListaDim c = (ListaDim)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		 
								
								Declaracion res=new Declaracion(b,c.List); 
								res.Tipo=a.Tipo; 
								res.SubDeclaracion=a;  
								RESULT=res;							
								
		 					     
              CUP$ParserP$result = new java_cup.runtime.Symbol(27/*listaDeclaracion*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // listaDeclaracion ::= listaDeclaracion COMA ID 
            {
              Declaracion RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).right;
		Declaracion a = (Declaracion)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		 Declaracion res=new Declaracion(b,null); res.Tipo=a.Tipo; res.SubDeclaracion=a;  RESULT=res;
              CUP$ParserP$result = new java_cup.runtime.Symbol(27/*listaDeclaracion*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // listaDeclaracion ::= listaDeclaracion COMA ID ASIGNA EXP 
            {
              Declaracion RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-4)).right;
		Declaracion a = (Declaracion)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		 
							      Declaracion res=new Declaracion(b,null); 

							      ExpID Ig=new ExpID(null,b,null,false);
							      Asignacion As=new Asignacion(Ig,c,false);  
							      res.InicializarDeclaracion=As;
  
							      res.Tipo=a.Tipo; 
							      res.SubDeclaracion=a;  
							      RESULT=res;
							    
              CUP$ParserP$result = new java_cup.runtime.Symbol(27/*listaDeclaracion*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-4)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // declaracion1 ::= listaDeclaracion 
            {
              Declaracion RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		Declaracion b = (Declaracion)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		RESULT=b;
              CUP$ParserP$result = new java_cup.runtime.Symbol(26/*declaracion1*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // EXPliteral ::= CARACTER 
            {
              ExpLiteral RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		RESULT=new ExpLiteral(a,"char");
              CUP$ParserP$result = new java_cup.runtime.Symbol(39/*EXPliteral*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // EXPliteral ::= FALSE 
            {
              ExpLiteral RESULT = null;
		RESULT=new ExpLiteral("0","boolean");
              CUP$ParserP$result = new java_cup.runtime.Symbol(39/*EXPliteral*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // EXPliteral ::= TRUE 
            {
              ExpLiteral RESULT = null;
		RESULT=new ExpLiteral("1","boolean");
              CUP$ParserP$result = new java_cup.runtime.Symbol(39/*EXPliteral*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // EXPliteral ::= ENTERO PUNTO ENTERO 
            {
              ExpLiteral RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		String a1 = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		RESULT=new ExpLiteral(a+"."+a1,"float");
              CUP$ParserP$result = new java_cup.runtime.Symbol(39/*EXPliteral*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // EXPliteral ::= ENTERO 
            {
              ExpLiteral RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		RESULT=new ExpLiteral(a,"int");
              CUP$ParserP$result = new java_cup.runtime.Symbol(39/*EXPliteral*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // EXPliteral ::= CADENA 
            {
              ExpLiteral RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		RESULT=new ExpLiteral(a,"string");
              CUP$ParserP$result = new java_cup.runtime.Symbol(39/*EXPliteral*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Indices ::= CA EXP CC 
            {
              ListaExp RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).value;
		ListaExp res=new ListaExp(); res.List.add(a); RESULT=res;
              CUP$ParserP$result = new java_cup.runtime.Symbol(40/*Indices*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Indices ::= Indices CA EXP CC 
            {
              ListaExp RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).right;
		ListaExp a = (ListaExp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).value;
		a.List.add(b);RESULT=a;
              CUP$ParserP$result = new java_cup.runtime.Symbol(40/*Indices*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXPID ::= ID 
            {
              ExpID RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		RESULT=new ExpID(null,a,null,false);
              CUP$ParserP$result = new java_cup.runtime.Symbol(38/*EXPID*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EXPID ::= NEW ID PA parametros PC 
            {
              ExpID RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).right;
		ListaExp c = (ListaExp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).value;
		
						  ExpID re=new ExpID(bleft,null,b,c.List,true);
						  re.NEW=true;
						  RESULT=re;
						  //RESULT=new Asignacion(aleft,a,re,false);
						
              CUP$ParserP$result = new java_cup.runtime.Symbol(38/*EXPID*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-4)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // EXPID ::= ID PA parametros PC 
            {
              ExpID RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).right;
		ListaExp c = (ListaExp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).value;
		
						  ExpID re=new ExpID(bleft,null,b,c.List,true);
						  RESULT=re;
						  //RESULT=new Asignacion(aleft,a,re,false);
						
              CUP$ParserP$result = new java_cup.runtime.Symbol(38/*EXPID*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // EXPID ::= NEW ID PA PC 
            {
              ExpID RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).value;
		
						  ExpID re=new ExpID(bleft,null,b,null,true);
						  re.NEW=true;
						  RESULT=re;						  
						  //RESULT=new Asignacion(aleft,a,re,false);
						
              CUP$ParserP$result = new java_cup.runtime.Symbol(38/*EXPID*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EXPID ::= ID PA PC 
            {
              ExpID RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).value;
		
						  ExpID re=new ExpID(bleft,null,b,null,true);
						  RESULT=re;
						  //RESULT=new Asignacion(aleft,a,re,false);
						
              CUP$ParserP$result = new java_cup.runtime.Symbol(38/*EXPID*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXPID ::= ID Indices 
            {
              ExpID RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		ListaExp b = (ListaExp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		RESULT=new ExpID(null,a,b.List,false);
              CUP$ParserP$result = new java_cup.runtime.Symbol(38/*EXPID*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXPID ::= EXPID PUNTO ID PA parametros PC 
            {
              ExpID RESULT = null;
		int a0left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-5)).left;
		int a0right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-5)).right;
		ExpID a0 = (ExpID)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).right;
		ListaExp c = (ListaExp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).value;
		  
						  ExpID re=new ExpID(bleft,a0,b,c.List,true);
						  RESULT=re;
					      
              CUP$ParserP$result = new java_cup.runtime.Symbol(38/*EXPID*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-5)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXPID ::= EXPID PUNTO ID PA PC 
            {
              ExpID RESULT = null;
		int a0left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-4)).left;
		int a0right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-4)).right;
		ExpID a0 = (ExpID)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).value;
		  
						  ExpID re=new ExpID(bleft,a0,b,null,true);
						  RESULT=re;
					      
              CUP$ParserP$result = new java_cup.runtime.Symbol(38/*EXPID*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-4)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXPID ::= EXPID PUNTO ID Indices 
            {
              ExpID RESULT = null;
		int a0left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).left;
		int a0right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).right;
		ExpID a0 = (ExpID)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		ListaExp b = (ListaExp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		RESULT=new ExpID(a0,a,b.List,false);
              CUP$ParserP$result = new java_cup.runtime.Symbol(38/*EXPID*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXPID ::= EXPID PUNTO ID 
            {
              ExpID RESULT = null;
		int a0left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left;
		int a0right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).right;
		ExpID a0 = (ExpID)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		RESULT=new ExpID(a0,a,null,false);
              CUP$ParserP$result = new java_cup.runtime.Symbol(38/*EXPID*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXPU ::= EXPliteral 
            {
              Exp RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		ExpLiteral a = (ExpLiteral)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		RESULT=a;
              CUP$ParserP$result = new java_cup.runtime.Symbol(37/*EXPU*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXPU ::= EXPID 
            {
              Exp RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		ExpID a = (ExpID)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		
						  //RESULT=new ExpID(null,a,null,false);
						  RESULT=a;
						
              CUP$ParserP$result = new java_cup.runtime.Symbol(37/*EXPU*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXPU ::= PA EXP PC 
            {
              Exp RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).value;
		RESULT=a;
              CUP$ParserP$result = new java_cup.runtime.Symbol(37/*EXPU*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXPU ::= NOT PA EXP PC 
            {
              Exp RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).value;
		RESULT=new ExpU(a,"!");
              CUP$ParserP$result = new java_cup.runtime.Symbol(37/*EXPU*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXPM ::= EXPU 
            {
              Exp RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		RESULT=a;
              CUP$ParserP$result = new java_cup.runtime.Symbol(36/*EXPM*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXPM ::= EXPM DIV EXPU 
            {
              Exp RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		RESULT=new ExpBinaria(a,b,"/");
              CUP$ParserP$result = new java_cup.runtime.Symbol(36/*EXPM*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXPM ::= EXPM MOD EXPU 
            {
              Exp RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		RESULT=new ExpBinaria(a,b,"%");
              CUP$ParserP$result = new java_cup.runtime.Symbol(36/*EXPM*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXPM ::= EXPM POR EXPU 
            {
              Exp RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		RESULT=new ExpBinaria(a,b,"*");
              CUP$ParserP$result = new java_cup.runtime.Symbol(36/*EXPM*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXPA ::= EXPM 
            {
              Exp RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		RESULT=a;
              CUP$ParserP$result = new java_cup.runtime.Symbol(35/*EXPA*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXPA ::= EXPA MENOS EXPM 
            {
              Exp RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		RESULT=new ExpBinaria(a,b,"-");
              CUP$ParserP$result = new java_cup.runtime.Symbol(35/*EXPA*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXPA ::= EXPA MAS EXPM 
            {
              Exp RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		RESULT=new ExpBinaria(a,b,"+");
              CUP$ParserP$result = new java_cup.runtime.Symbol(35/*EXPA*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXPRE ::= EXPA 
            {
              Exp RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		RESULT=a;
              CUP$ParserP$result = new java_cup.runtime.Symbol(34/*EXPRE*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXPRE ::= EXPRE MAYORIGUAL EXPA 
            {
              Exp RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		RESULT=new ExpBinaria(a,b,">=");
              CUP$ParserP$result = new java_cup.runtime.Symbol(34/*EXPRE*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXPRE ::= EXPRE MENORIGUAL EXPA 
            {
              Exp RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		RESULT=new ExpBinaria(a,b,"<=");
              CUP$ParserP$result = new java_cup.runtime.Symbol(34/*EXPRE*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXPRE ::= EXPRE MAYORQ EXPA 
            {
              Exp RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		RESULT=new ExpBinaria(a,b,">");
              CUP$ParserP$result = new java_cup.runtime.Symbol(34/*EXPRE*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPRE ::= EXPRE MENORQ EXPA 
            {
              Exp RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		RESULT=new ExpBinaria(a,b,"<");
              CUP$ParserP$result = new java_cup.runtime.Symbol(34/*EXPRE*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPIG ::= EXPRE 
            {
              Exp RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		RESULT=a;
              CUP$ParserP$result = new java_cup.runtime.Symbol(33/*EXPIG*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPIG ::= EXPIG NOIGUAL EXPRE 
            {
              Exp RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		RESULT=new ExpBinaria(a,b,"!=");
              CUP$ParserP$result = new java_cup.runtime.Symbol(33/*EXPIG*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPIG ::= EXPIG IGUAL EXPRE 
            {
              Exp RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		RESULT=new ExpBinaria(a,b,"==");
              CUP$ParserP$result = new java_cup.runtime.Symbol(33/*EXPIG*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPAND ::= EXPIG 
            {
              Exp RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		RESULT=a;
              CUP$ParserP$result = new java_cup.runtime.Symbol(32/*EXPAND*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPAND ::= EXPAND AND EXPIG 
            {
              Exp RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		RESULT=new ExpBinaria(a,b,"&&");
              CUP$ParserP$result = new java_cup.runtime.Symbol(32/*EXPAND*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXP ::= EXPAND 
            {
              Exp RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		RESULT=a;
              CUP$ParserP$result = new java_cup.runtime.Symbol(31/*EXP*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXP ::= EXP OR EXPAND 
            {
              Exp RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		RESULT=new ExpBinaria(a,b,"||");
              CUP$ParserP$result = new java_cup.runtime.Symbol(31/*EXP*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // parametros ::= EXP 
            {
              ListaExp RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		ListaExp res=new ListaExp(); res.List.add(a);RESULT=res;
              CUP$ParserP$result = new java_cup.runtime.Symbol(30/*parametros*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // parametros ::= parametros COMA EXP 
            {
              ListaExp RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).right;
		ListaExp a = (ListaExp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		a.List.add(b); RESULT=a;
              CUP$ParserP$result = new java_cup.runtime.Symbol(30/*parametros*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // llamadaProcedimiento1 ::= EXPID 
            {
              ExpID RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		ExpID a = (ExpID)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		RESULT=a;
              CUP$ParserP$result = new java_cup.runtime.Symbol(29/*llamadaProcedimiento1*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // assigancion1 ::= EXPID MOD ASIGNA EXP 
            {
              Asignacion RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).right;
		ExpID a = (ExpID)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		ExpBinaria n=new ExpBinaria(a,b,"%"); RESULT=new Asignacion(aleft,a,n,false);
              CUP$ParserP$result = new java_cup.runtime.Symbol(25/*assigancion1*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // assigancion1 ::= EXPID DIV ASIGNA EXP 
            {
              Asignacion RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).right;
		ExpID a = (ExpID)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		ExpBinaria n=new ExpBinaria(a,b,"/"); RESULT=new Asignacion(aleft,a,n,false);
              CUP$ParserP$result = new java_cup.runtime.Symbol(25/*assigancion1*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // assigancion1 ::= EXPID POR ASIGNA EXP 
            {
              Asignacion RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).right;
		ExpID a = (ExpID)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		ExpBinaria n=new ExpBinaria(a,b,"*"); RESULT=new Asignacion(aleft,a,n,false);
              CUP$ParserP$result = new java_cup.runtime.Symbol(25/*assigancion1*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // assigancion1 ::= EXPID MENOS ASIGNA EXP 
            {
              Asignacion RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).right;
		ExpID a = (ExpID)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		ExpBinaria n=new ExpBinaria(a,b,"-"); RESULT=new Asignacion(aleft,a,n,false);
              CUP$ParserP$result = new java_cup.runtime.Symbol(25/*assigancion1*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // assigancion1 ::= EXPID MAS ASIGNA EXP 
            {
              Asignacion RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).right;
		ExpID a = (ExpID)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		ExpBinaria n=new ExpBinaria(a,b,"+"); RESULT=new Asignacion(aleft,a,n,false);
              CUP$ParserP$result = new java_cup.runtime.Symbol(25/*assigancion1*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // assigancion1 ::= EXPID MENOS MENOS 
            {
              Asignacion RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).right;
		ExpID a = (ExpID)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).value;
		
						  //ExpID res=new ExpID(null,a,null,false); 
						  ExpLiteral uno=new ExpLiteral("1","int");
                                                  ExpBinaria resta1=new ExpBinaria(a,uno,"-");RESULT=new Asignacion(aleft,a,resta1,false);
						
              CUP$ParserP$result = new java_cup.runtime.Symbol(25/*assigancion1*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // assigancion1 ::= EXPID MAS MAS 
            {
              Asignacion RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).right;
		ExpID a = (ExpID)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).value;
		
						  //ExpID res=new ExpID(null,a,null,false); 
						  ExpLiteral uno=new ExpLiteral("1","int");
                                                  ExpBinaria suma1=new ExpBinaria(a,uno,"+");
						  RESULT=new Asignacion(aleft,a,suma1,false);
						
              CUP$ParserP$result = new java_cup.runtime.Symbol(25/*assigancion1*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // assigancion1 ::= EXPID ASIGNA EXP 
            {
              Asignacion RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).right;
		ExpID a = (ExpID)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		
						  //ExpID res=new ExpID(null,a,null,false); 
						  RESULT=new Asignacion(aleft,a,b,false);
						
              CUP$ParserP$result = new java_cup.runtime.Symbol(25/*assigancion1*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // default1 ::= DEFAULT DPUNTOS ListaInstruccionesCase 
            {
              Else RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		ListaInstrucciones a = (ListaInstrucciones)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		RESULT=new Else(a.List);
              CUP$ParserP$result = new java_cup.runtime.Symbol(24/*default1*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // case1 ::= CASE EXP DPUNTOS ListaInstruccionesCase 
            {
              ElseIF RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		ListaInstrucciones b = (ListaInstrucciones)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		ExpBinaria cond=new ExpBinaria(parser.part,a,"=="); RESULT=new ElseIF(cond,b.List);
              CUP$ParserP$result = new java_cup.runtime.Symbol(21/*case1*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // listaCase ::= default1 
            {
              ListaElseIF RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		Else a = (Else)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		 ListaElseIF res=new ListaElseIF(); res.Else=a; RESULT=res;
              CUP$ParserP$result = new java_cup.runtime.Symbol(22/*listaCase*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // listaCase ::= case1 
            {
              ListaElseIF RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		ElseIF a = (ElseIF)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		ListaElseIF res=new ListaElseIF(); res.List.add(a); RESULT=res;
              CUP$ParserP$result = new java_cup.runtime.Symbol(22/*listaCase*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // listaCase ::= case1 listaCase 
            {
              ListaElseIF RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).right;
		ElseIF a = (ElseIF)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		ListaElseIF b = (ListaElseIF)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		b.List.addFirst(a); RESULT=b;
              CUP$ParserP$result = new java_cup.runtime.Symbol(22/*listaCase*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ListaInstruccionesCase ::= ListaInstrucciones1Case 
            {
              ListaInstrucciones RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		ListaInstrucciones a = (ListaInstrucciones)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		RESULT=a;
              CUP$ParserP$result = new java_cup.runtime.Symbol(23/*ListaInstruccionesCase*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // switch1 ::= SWITCH PA EXP NT$0 PC LLA listaCase LLC 
            {
              IF RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-4)).value != null )
                RESULT = (IF) ((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-5)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).right;
		ListaElseIF b = (ListaElseIF)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).value;
		 ExpLiteral con=new ExpLiteral("0","int"); RESULT=new IF(aleft,con,null,b.List,b.Else);
              CUP$ParserP$result = new java_cup.runtime.Symbol(20/*switch1*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-7)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$0 ::= 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
 parser.part=a;
              CUP$ParserP$result = new java_cup.runtime.Symbol(46/*NT$0*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // doWhile ::= DO LLA ListaInstrucciones1Case LLC WHILE PA EXP PC 
            {
              Loop RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-5)).right;
		ListaInstrucciones a = (ListaInstrucciones)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).value;
		RESULT=new Loop(aleft,b,a.List,true);
              CUP$ParserP$result = new java_cup.runtime.Symbol(19/*doWhile*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-7)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // while1 ::= WHILE PA EXP PC Instruccion1Case 
            {
              Loop RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		LinkedList <Instruccion> Ins=new LinkedList(); Ins.add(b); RESULT=new Loop(aleft,a,Ins);
              CUP$ParserP$result = new java_cup.runtime.Symbol(18/*while1*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-4)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // while1 ::= WHILE PA EXP PC LLA ListaInstrucciones1Case LLC 
            {
              Loop RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-4)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).right;
		ListaInstrucciones b = (ListaInstrucciones)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).value;
		RESULT=new Loop(aleft,a,b.List);
              CUP$ParserP$result = new java_cup.runtime.Symbol(18/*while1*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-6)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // for1 ::= FOR PA assigancion1 PCOMA EXP PCOMA PC Instruccion1Case 
            {
              Loop RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-5)).right;
		Asignacion a = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		LinkedList<Instruccion> Ins=new LinkedList(); Ins.add(d); RESULT=new Loop(aleft,a,b,null,Ins);
              CUP$ParserP$result = new java_cup.runtime.Symbol(17/*for1*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-7)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // for1 ::= FOR PA assigancion1 PCOMA EXP PCOMA PC LLA ListaInstrucciones1Case LLC 
            {
              Loop RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-7)).right;
		Asignacion a = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-5)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).right;
		ListaInstrucciones d = (ListaInstrucciones)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).value;
		RESULT=new Loop(aleft,a,b,null,d.List);
              CUP$ParserP$result = new java_cup.runtime.Symbol(17/*for1*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-9)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // for1 ::= FOR PA assigancion1 PCOMA EXP PCOMA assigancion1 PC Instruccion1Case 
            {
              Loop RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-6)).right;
		Asignacion a = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-4)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).right;
		Asignacion c = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		LinkedList<Instruccion> Ins=new LinkedList(); Ins.add(d); RESULT=new Loop(aleft,a,b,c,Ins);
              CUP$ParserP$result = new java_cup.runtime.Symbol(17/*for1*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-8)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // for1 ::= FOR PA assigancion1 PCOMA EXP PCOMA assigancion1 PC LLA ListaInstrucciones1Case LLC 
            {
              Loop RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-8)).right;
		Asignacion a = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-6)).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-4)).right;
		Asignacion c = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).right;
		ListaInstrucciones d = (ListaInstrucciones)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).value;
		RESULT=new Loop(aleft,a,b,c,d.List);
              CUP$ParserP$result = new java_cup.runtime.Symbol(17/*for1*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-10)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // listaElseif ::= ELSE IF PA EXP PC LLA ListaInstrucciones1 LLC 
            {
              ListaElseIF RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-4)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).right;
		ListaInstrucciones b = (ListaInstrucciones)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).value;
		ListaElseIF t=new ListaElseIF(); ElseIF t1=new ElseIF(a,b.List); t.List.add(t1);RESULT=t; 
              CUP$ParserP$result = new java_cup.runtime.Symbol(16/*listaElseif*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-7)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // listaElseif ::= listaElseif ELSE IF PA EXP PC LLA ListaInstrucciones1 LLC 
            {
              ListaElseIF RESULT = null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-8)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-8)).right;
		ListaElseIF a1 = (ListaElseIF)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-4)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).right;
		ListaInstrucciones b = (ListaInstrucciones)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).value;
		ElseIF temp=new ElseIF(a,b.List); a1.List.add(temp); RESULT=a1;
              CUP$ParserP$result = new java_cup.runtime.Symbol(16/*listaElseif*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-8)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // if1 ::= IF PA EXP PC LLA ListaInstrucciones1 LLC listaElseif ELSE LLA ListaInstrucciones1 LLC 
            {
              IF RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-9)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-6)).right;
		ListaInstrucciones b = (ListaInstrucciones)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-4)).right;
		ListaElseIF c = (ListaElseIF)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).right;
		ListaInstrucciones d = (ListaInstrucciones)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).value;
		Else res=new Else(d.List); RESULT=new IF(aleft,a,b.List,c.List,res);
              CUP$ParserP$result = new java_cup.runtime.Symbol(14/*if1*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-11)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // if1 ::= IF PA EXP PC LLA ListaInstrucciones1 LLC listaElseif 
            {
              IF RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-5)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).right;
		ListaInstrucciones b = (ListaInstrucciones)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		ListaElseIF c = (ListaElseIF)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		RESULT=new IF(aleft,a,b.List,c.List,null);
              CUP$ParserP$result = new java_cup.runtime.Symbol(14/*if1*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-7)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // if1 ::= IF PA EXP PC LLA ListaInstrucciones1 LLC ELSE LLA ListaInstrucciones1 LLC 
            {
              IF RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-8)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-5)).right;
		ListaInstrucciones b = (ListaInstrucciones)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).right;
		ListaInstrucciones c = (ListaInstrucciones)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).value;
		Else res=new Else(c.List); RESULT=new IF(aleft,a,b.List,null,res);
              CUP$ParserP$result = new java_cup.runtime.Symbol(14/*if1*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-10)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // if1 ::= IF PA EXP PC Instruccion1 
            {
              IF RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		LinkedList <Instruccion> Ins=new LinkedList(); Ins.add(b); RESULT=new IF(aleft,a,Ins,null,null);
              CUP$ParserP$result = new java_cup.runtime.Symbol(14/*if1*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-4)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // if1 ::= IF PA EXP PC LLA ListaInstrucciones1 LLC 
            {
              IF RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-4)).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).right;
		ListaInstrucciones b = (ListaInstrucciones)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).value;
		RESULT=new IF(aleft,a,b.List,null,null);
              CUP$ParserP$result = new java_cup.runtime.Symbol(14/*if1*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-6)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Instruccion1 ::= error PCOMA 
            {
              Instruccion RESULT = null;
		RESULT=null;
              CUP$ParserP$result = new java_cup.runtime.Symbol(11/*Instruccion1*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Instruccion1 ::= error LLC 
            {
              Instruccion RESULT = null;
		RESULT=null;
              CUP$ParserP$result = new java_cup.runtime.Symbol(11/*Instruccion1*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Instruccion1 ::= RETURN EXP PCOMA 
            {
              Instruccion RESULT = null;
		int a0left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left;
		int a0right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).right;
		String a0 = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).right;
		Exp a1 = (Exp)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).value;
		Return ret=new Return(a0left,a1);RESULT=ret;
              CUP$ParserP$result = new java_cup.runtime.Symbol(11/*Instruccion1*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Instruccion1 ::= llamadaProcedimiento1 PCOMA 
            {
              Instruccion RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).right;
		ExpID a = (ExpID)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).value;
		RESULT=a;
              CUP$ParserP$result = new java_cup.runtime.Symbol(11/*Instruccion1*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Instruccion1 ::= declaracion1 PCOMA 
            {
              Instruccion RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).right;
		Declaracion a = (Declaracion)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).value;
		RESULT=a;
              CUP$ParserP$result = new java_cup.runtime.Symbol(11/*Instruccion1*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Instruccion1 ::= assigancion1 PCOMA 
            {
              Instruccion RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).right;
		Asignacion a = (Asignacion)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).value;
		RESULT=a;
              CUP$ParserP$result = new java_cup.runtime.Symbol(11/*Instruccion1*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Instruccion1 ::= switch1 
            {
              Instruccion RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		IF a = (IF)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		RESULT=a;
              CUP$ParserP$result = new java_cup.runtime.Symbol(11/*Instruccion1*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Instruccion1 ::= doWhile 
            {
              Instruccion RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		Loop a = (Loop)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		RESULT=a;
              CUP$ParserP$result = new java_cup.runtime.Symbol(11/*Instruccion1*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Instruccion1 ::= while1 
            {
              Instruccion RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		Loop a = (Loop)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		RESULT=a;
              CUP$ParserP$result = new java_cup.runtime.Symbol(11/*Instruccion1*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Instruccion1 ::= for1 
            {
              Instruccion RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		Loop a = (Loop)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		RESULT=a;
              CUP$ParserP$result = new java_cup.runtime.Symbol(11/*Instruccion1*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Instruccion1 ::= if1 
            {
              Instruccion RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		IF a = (IF)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		RESULT=a;
              CUP$ParserP$result = new java_cup.runtime.Symbol(11/*Instruccion1*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ListaInstrucciones1 ::= Instruccion1 
            {
              ListaInstrucciones RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		ListaInstrucciones res=new ListaInstrucciones(); res.List.add(a);RESULT=res;
              CUP$ParserP$result = new java_cup.runtime.Symbol(10/*ListaInstrucciones1*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ListaInstrucciones1 ::= ListaInstrucciones1 Instruccion1 
            {
              ListaInstrucciones RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).right;
		ListaInstrucciones a = (ListaInstrucciones)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		a.List.add(b);RESULT=a;
              CUP$ParserP$result = new java_cup.runtime.Symbol(10/*ListaInstrucciones1*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Inicio ::= ListaInstrucciones1 
            {
              DeclaracionMetodos RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		ListaInstrucciones a = (ListaInstrucciones)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		RESULT=new DeclaracionMetodos("_main","void",null,a.List);
              CUP$ParserP$result = new java_cup.runtime.Symbol(9/*Inicio*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Visibilidad ::= PRIVADO 
            {
              String RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		RESULT=a;
              CUP$ParserP$result = new java_cup.runtime.Symbol(8/*Visibilidad*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Visibilidad ::= PROTEGIDO 
            {
              String RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		RESULT=a;
              CUP$ParserP$result = new java_cup.runtime.Symbol(8/*Visibilidad*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Visibilidad ::= PUBLICO 
            {
              String RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		RESULT=a;
              CUP$ParserP$result = new java_cup.runtime.Symbol(8/*Visibilidad*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ParametrosMetodo ::= Tipo1 AP ID 
            {
              ListaDeclaracion RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		String a1 = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		Declaracion r=new Declaracion(a1,a,null,true); ListaDeclaracion res=new ListaDeclaracion(); res.L.add(r); RESULT=res;
              CUP$ParserP$result = new java_cup.runtime.Symbol(6/*ParametrosMetodo*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ParametrosMetodo ::= Tipo1 ID 
            {
              ListaDeclaracion RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		String a1 = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		Declaracion r=new Declaracion(a1,a,null,false); ListaDeclaracion res=new ListaDeclaracion(); res.L.add(r); RESULT=res;
              CUP$ParserP$result = new java_cup.runtime.Symbol(6/*ParametrosMetodo*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ParametrosMetodo ::= ParametrosMetodo COMA Tipo1 AP ID 
            {
              ListaDeclaracion RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-4)).right;
		ListaDeclaracion a = (ListaDeclaracion)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-4)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).right;
		String a2 = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		String a3 = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		Declaracion r=new Declaracion(a3,a2,null,true); a.L.add(r);RESULT=a;
              CUP$ParserP$result = new java_cup.runtime.Symbol(6/*ParametrosMetodo*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-4)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ParametrosMetodo ::= ParametrosMetodo COMA Tipo1 ID 
            {
              ListaDeclaracion RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).right;
		ListaDeclaracion a = (ListaDeclaracion)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).right;
		String a2 = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		String a3 = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		Declaracion r=new Declaracion(a3,a2,null,false); a.L.add(r);RESULT=a;
              CUP$ParserP$result = new java_cup.runtime.Symbol(6/*ParametrosMetodo*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DMetodo ::= VOID ID PA ParametrosMetodo PC LLA ListaInstrucciones1 LLC 
            {
              DeclaracionMetodos RESULT = null;
		int a2left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-6)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-6)).right;
		String a2 = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-6)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-4)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-4)).right;
		ListaDeclaracion a3 = (ListaDeclaracion)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-4)).value;
		int a4left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left;
		int a4right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).right;
		ListaInstrucciones a4 = (ListaInstrucciones)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).value;
		DeclaracionMetodos res=new DeclaracionMetodos("private",a2,"void",a3.L,a4.List); RESULT=res;
              CUP$ParserP$result = new java_cup.runtime.Symbol(5/*DMetodo*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-7)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DMetodo ::= Visibilidad VOID ID PA ParametrosMetodo PC LLA ListaInstrucciones1 LLC 
            {
              DeclaracionMetodos RESULT = null;
		int a0left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-8)).left;
		int a0right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-8)).right;
		String a0 = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-8)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-6)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-6)).right;
		String a2 = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-6)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-4)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-4)).right;
		ListaDeclaracion a3 = (ListaDeclaracion)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-4)).value;
		int a4left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left;
		int a4right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).right;
		ListaInstrucciones a4 = (ListaInstrucciones)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).value;
		DeclaracionMetodos res=new DeclaracionMetodos(a0,a2,"void",a3.L,a4.List);       RESULT=res;
              CUP$ParserP$result = new java_cup.runtime.Symbol(5/*DMetodo*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-8)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DMetodo ::= Tipo1 ID PA ParametrosMetodo PC LLA ListaInstrucciones1 LLC 
            {
              DeclaracionMetodos RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-7)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-6)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-6)).right;
		String a2 = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-6)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-4)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-4)).right;
		ListaDeclaracion a3 = (ListaDeclaracion)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-4)).value;
		int a4left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left;
		int a4right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).right;
		ListaInstrucciones a4 = (ListaInstrucciones)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).value;
		DeclaracionMetodos res=new DeclaracionMetodos("private",a2,a,a3.L,a4.List); RESULT=res;
              CUP$ParserP$result = new java_cup.runtime.Symbol(5/*DMetodo*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-7)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DMetodo ::= Visibilidad Tipo1 ID PA ParametrosMetodo PC LLA ListaInstrucciones1 LLC 
            {
              DeclaracionMetodos RESULT = null;
		int a0left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-8)).left;
		int a0right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-8)).right;
		String a0 = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-7)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-6)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-6)).right;
		String a2 = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-6)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-4)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-4)).right;
		ListaDeclaracion a3 = (ListaDeclaracion)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-4)).value;
		int a4left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left;
		int a4right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).right;
		ListaInstrucciones a4 = (ListaInstrucciones)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).value;
		DeclaracionMetodos res=new DeclaracionMetodos(a0,a2,a,a3.L,a4.List);       RESULT=res;
              CUP$ParserP$result = new java_cup.runtime.Symbol(5/*DMetodo*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-8)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DMetodo ::= Tipo1 ID PA PC LLA ListaInstrucciones1 LLC 
            {
              DeclaracionMetodos RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-6)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-5)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-5)).right;
		String a2 = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-5)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).right;
		ListaInstrucciones a3 = (ListaInstrucciones)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).value;
		DeclaracionMetodos res=new DeclaracionMetodos("private",a2,a,null,a3.List);   RESULT=res;
              CUP$ParserP$result = new java_cup.runtime.Symbol(5/*DMetodo*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-6)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DMetodo ::= VOID ID PA PC LLA ListaInstrucciones1 LLC 
            {
              DeclaracionMetodos RESULT = null;
		int a2left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-5)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-5)).right;
		String a2 = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-5)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).right;
		ListaInstrucciones a3 = (ListaInstrucciones)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).value;
		DeclaracionMetodos res=new DeclaracionMetodos("private",a2,"void",null,a3.List);   RESULT=res;
              CUP$ParserP$result = new java_cup.runtime.Symbol(5/*DMetodo*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-6)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DMetodo ::= Visibilidad VOID ID PA PC LLA ListaInstrucciones1 LLC 
            {
              DeclaracionMetodos RESULT = null;
		int a0left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-7)).left;
		int a0right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-7)).right;
		String a0 = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-7)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-5)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-5)).right;
		String a2 = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-5)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).right;
		ListaInstrucciones a3 = (ListaInstrucciones)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).value;
		DeclaracionMetodos res=new DeclaracionMetodos(a0,a2,"void",null,a3.List);          RESULT=res;
              CUP$ParserP$result = new java_cup.runtime.Symbol(5/*DMetodo*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-7)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DMetodo ::= Visibilidad Tipo1 ID PA PC LLA ListaInstrucciones1 LLC 
            {
              DeclaracionMetodos RESULT = null;
		int a0left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-7)).left;
		int a0right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-7)).right;
		String a0 = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-6)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-5)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-5)).right;
		String a2 = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-5)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).right;
		ListaInstrucciones a3 = (ListaInstrucciones)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).value;
		DeclaracionMetodos res=new DeclaracionMetodos(a0,a2,a,null,a3.List);          RESULT=res;
              CUP$ParserP$result = new java_cup.runtime.Symbol(5/*DMetodo*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-7)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DAtributo ::= Tipo1 ID PCOMA 
            {
              Declaracion RESULT = null;
		int a2left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).right;
		String a2 = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).right;
		String a3 = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).value;
		Declaracion res= new Declaracion(a2left,"private",a3,a2,null);RESULT=res;
              CUP$ParserP$result = new java_cup.runtime.Symbol(7/*DAtributo*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DAtributo ::= Tipo1 ID Dimenciones PCOMA 
            {
              Declaracion RESULT = null;
		int a2left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).right;
		String a2 = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).right;
		String a3 = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).value;
		int a4left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left;
		int a4right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).right;
		ListaDim a4 = (ListaDim)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).value;
		Declaracion res= new Declaracion(a2left,"private",a3,a2,a4.List);RESULT=res;
              CUP$ParserP$result = new java_cup.runtime.Symbol(7/*DAtributo*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DAtributo ::= Visibilidad Tipo1 ID Dimenciones PCOMA 
            {
              Declaracion RESULT = null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-4)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-4)).right;
		String a1 = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-4)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).right;
		String a2 = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).right;
		String a3 = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).value;
		int a4left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left;
		int a4right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).right;
		ListaDim a4 = (ListaDim)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).value;
		Declaracion res= new Declaracion(a2left,a1,a2,a3,a4.List); RESULT=res;
              CUP$ParserP$result = new java_cup.runtime.Symbol(7/*DAtributo*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-4)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DAtributo ::= Visibilidad Tipo1 ID PCOMA 
            {
              Declaracion RESULT = null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).right;
		String a1 = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).right;
		String a2 = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-2)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).right;
		String a3 = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).value;
		Declaracion res= new Declaracion(a2left,a1,a2,a3,null); RESULT=res;
              CUP$ParserP$result = new java_cup.runtime.Symbol(7/*DAtributo*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // MiembroDeClase1 ::= DMetodo 
            {
              Object RESULT = null;
		
              CUP$ParserP$result = new java_cup.runtime.Symbol(4/*MiembroDeClase1*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // MiembroDeClase1 ::= DAtributo 
            {
              Object RESULT = null;
		
              CUP$ParserP$result = new java_cup.runtime.Symbol(4/*MiembroDeClase1*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // MiembrosDeClase1 ::= DAtributo 
            {
              ListaMetodosAtributos RESULT = null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		Declaracion a1 = (Declaracion)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		ListaMetodosAtributos res=new ListaMetodosAtributos(); res.LA.add(a1);RESULT=res;
              CUP$ParserP$result = new java_cup.runtime.Symbol(3/*MiembrosDeClase1*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // MiembrosDeClase1 ::= DMetodo 
            {
              ListaMetodosAtributos RESULT = null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		DeclaracionMetodos a1 = (DeclaracionMetodos)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		ListaMetodosAtributos res=new ListaMetodosAtributos(); res.LM.add(a1);RESULT=res;
              CUP$ParserP$result = new java_cup.runtime.Symbol(3/*MiembrosDeClase1*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // MiembrosDeClase1 ::= MiembrosDeClase1 DAtributo 
            {
              ListaMetodosAtributos RESULT = null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).right;
		ListaMetodosAtributos a1 = (ListaMetodosAtributos)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		Declaracion a2 = (Declaracion)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		a1.LA.add(a2); RESULT=a1;
              CUP$ParserP$result = new java_cup.runtime.Symbol(3/*MiembrosDeClase1*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // MiembrosDeClase1 ::= MiembrosDeClase1 DMetodo 
            {
              ListaMetodosAtributos RESULT = null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).right;
		ListaMetodosAtributos a1 = (ListaMetodosAtributos)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		DeclaracionMetodos a2 = (DeclaracionMetodos)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		a1.LM.add(a2); RESULT=a1;
              CUP$ParserP$result = new java_cup.runtime.Symbol(3/*MiembrosDeClase1*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DeclaracionClase1 ::= CLASS ID EXTENDS ID LLA MiembrosDeClase1 LLC 
            {
              Clase RESULT = null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-5)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-5)).right;
		String a1 = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-5)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).right;
		String a2 = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).right;
		ListaMetodosAtributos a3 = (ListaMetodosAtributos)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).value;
		Clase res=new Clase(a1,a2); res.Atributos=a3.LA; res.Metodos=a3.LM; RESULT=res;
              CUP$ParserP$result = new java_cup.runtime.Symbol(2/*DeclaracionClase1*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-6)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DeclaracionClase1 ::= CLASS ID LLA MiembrosDeClase1 LLC 
            {
              Clase RESULT = null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).right;
		String a1 = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).right;
		ListaMetodosAtributos a2 = (ListaMetodosAtributos)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).value;
		Clase res=new Clase(a1,""); res.Atributos=a2.LA; res.Metodos=a2.LM; RESULT=res;
              CUP$ParserP$result = new java_cup.runtime.Symbol(2/*DeclaracionClase1*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-4)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Import ::= IMPORT ID PUNTO ID PCOMA 
            {
              Object RESULT = null;
		int a0left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).left;
		int a0right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).right;
		String a0 = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-3)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).right;
		String a1 = (String)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).value;
		
				 File nArchivo = new File(parser.CanonicalPath+"/"+a0+"."+a1);
				 if(nArchivo!=null)
				 {
				    try {
                
				      ScannerProyecto scp=new ScannerProyecto(new FileReader(nArchivo));
				      ParserP pap=new ParserP();

				      pap.ins=parser.ins;
				      pap.TSC=parser.TSC;
				      pap.CanonicalPath=parser.CanonicalPath;
				      
				      pap.setScanner(scp);
				      try {
					    pap.parse();
					    
					    parser.ins=pap.ins;
					    parser.TSC=pap.TSC;
					    } catch (Exception ex) {
					    
						      }
						 } catch (FileNotFoundException ex) {
						}

				   }
			      
              CUP$ParserP$result = new java_cup.runtime.Symbol(43/*Import*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-4)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Limport ::= Import 
            {
              Object RESULT = null;
		
              CUP$ParserP$result = new java_cup.runtime.Symbol(44/*Limport*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Limport ::= Limport Import 
            {
              Object RESULT = null;
		
              CUP$ParserP$result = new java_cup.runtime.Symbol(44/*Limport*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LDeclaracionClases1 ::= DeclaracionClase1 
            {
              Object RESULT = null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		Clase a1 = (Clase)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		parser.ins.tabla=parser.TSC; parser.ins.SiguienteInstruccion.add(a1);
              CUP$ParserP$result = new java_cup.runtime.Symbol(45/*LDeclaracionClases1*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LDeclaracionClases1 ::= LDeclaracionClases1 DeclaracionClase1 
            {
              Object RESULT = null;
		int a1left = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right;
		Clase a1 = (Clase)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).value;
		parser.ins.tabla=parser.TSC; parser.ins.SiguienteInstruccion.add(a1);
              CUP$ParserP$result = new java_cup.runtime.Symbol(45/*LDeclaracionClases1*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= LDeclaracionClases1 
            {
              Object RESULT = null;
		
              CUP$ParserP$result = new java_cup.runtime.Symbol(1/*S*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= Limport LDeclaracionClases1 
            {
              Object RESULT = null;
		
              CUP$ParserP$result = new java_cup.runtime.Symbol(1/*S*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          return CUP$ParserP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).value;
		RESULT = start_val;
              CUP$ParserP$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserP$stack.elementAt(CUP$ParserP$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$ParserP$parser.done_parsing();
          return CUP$ParserP$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

